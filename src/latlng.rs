// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LatLng {
    // message fields
    pub latitude: f64,
    pub longitude: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LatLng {}

impl LatLng {
    pub fn new() -> LatLng {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LatLng {
        static mut instance: ::protobuf::lazy::Lazy<LatLng> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LatLng,
        };
        unsafe {
            instance.get(LatLng::new)
        }
    }

    // double latitude = 1;

    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = v;
    }

    pub fn get_latitude(&self) -> f64 {
        self.latitude
    }

    fn get_latitude_for_reflect(&self) -> &f64 {
        &self.latitude
    }

    fn mut_latitude_for_reflect(&mut self) -> &mut f64 {
        &mut self.latitude
    }

    // double longitude = 2;

    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = v;
    }

    pub fn get_longitude(&self) -> f64 {
        self.longitude
    }

    fn get_longitude_for_reflect(&self) -> &f64 {
        &self.longitude
    }

    fn mut_longitude_for_reflect(&mut self) -> &mut f64 {
        &mut self.longitude
    }
}

impl ::protobuf::Message for LatLng {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_double()?;
                    self.latitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_double()?;
                    self.longitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latitude != 0. {
            my_size += 9;
        };
        if self.longitude != 0. {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.latitude != 0. {
            os.write_double(1, self.latitude)?;
        };
        if self.longitude != 0. {
            os.write_double(2, self.longitude)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LatLng {
    fn new() -> LatLng {
        LatLng::new()
    }

    fn descriptor_static(_: ::std::option::Option<LatLng>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "latitude",
                    LatLng::get_latitude_for_reflect,
                    LatLng::mut_latitude_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "longitude",
                    LatLng::get_longitude_for_reflect,
                    LatLng::mut_longitude_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LatLng>(
                    "LatLng",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LatLng {
    fn clear(&mut self) {
        self.clear_latitude();
        self.clear_longitude();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatLng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatLng {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61,
    0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c, 0x6e,
    0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
    0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
    0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x60, 0x0a, 0x0f, 0x63,
    0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b,
    0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
    0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x61, 0x70, 0x69, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67,
    0x3b, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x47, 0x54, 0x50, 0x4a, 0xef, 0x17,
    0x0a, 0x06, 0x12, 0x04, 0x0e, 0x00, 0x46, 0x01, 0x0a, 0xbd, 0x04, 0x0a, 0x01, 0x0c, 0x12, 0x03,
    0x0e, 0x00, 0x12, 0x32, 0xb2, 0x04, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x32, 0x30, 0x31, 0x36, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63,
    0x2e, 0x0a, 0x0a, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64,
    0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69,
    0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32,
    0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
    0x22, 0x29, 0x3b, 0x0a, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65,
    0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
    0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f,
    0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
    0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a,
    0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20,
    0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x6f, 0x66,
    0x74, 0x77, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
    0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
    0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53,
    0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x0a, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
    0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20,
    0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e,
    0x59, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65,
    0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65,
    0x64, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f,
    0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
    0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10,
    0x08, 0x13, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x12, 0x00, 0x4f, 0x0a, 0x0b, 0x0a, 0x04,
    0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x12, 0x00, 0x4f, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x12, 0x03, 0x12, 0x07, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x12, 0x07, 0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x12, 0x07, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12,
    0x03, 0x12, 0x14, 0x4e, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x13, 0x00, 0x22, 0x0a, 0x0b,
    0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12, 0x03, 0x13, 0x00, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x08,
    0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x13, 0x07, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07,
    0x01, 0x02, 0x00, 0x12, 0x03, 0x13, 0x07, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x13, 0x07, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01,
    0x03, 0x12, 0x03, 0x13, 0x1d, 0x21, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x14, 0x00, 0x2c,
    0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x02, 0x12, 0x03, 0x14, 0x00, 0x2c, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x12, 0x03, 0x14, 0x07, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x08,
    0xe7, 0x07, 0x02, 0x02, 0x00, 0x12, 0x03, 0x14, 0x07, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7,
    0x07, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x14, 0x07, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7,
    0x07, 0x02, 0x07, 0x12, 0x03, 0x14, 0x1e, 0x2b, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x15,
    0x00, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x03, 0x12, 0x03, 0x15, 0x00, 0x28, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0d, 0x0a,
    0x06, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07,
    0x08, 0xe7, 0x07, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05,
    0x08, 0xe7, 0x07, 0x03, 0x07, 0x12, 0x03, 0x15, 0x16, 0x27, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12,
    0x03, 0x16, 0x00, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x04, 0x12, 0x03, 0x16, 0x00,
    0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04, 0x02, 0x12, 0x03, 0x16, 0x07, 0x18, 0x0a,
    0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x04, 0x02, 0x00, 0x12, 0x03, 0x16, 0x07, 0x18, 0x0a, 0x0e,
    0x0a, 0x07, 0x08, 0xe7, 0x07, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x16, 0x07, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04, 0x07, 0x12, 0x03, 0x16, 0x1b, 0x20, 0x0a, 0xdd, 0x0d, 0x0a,
    0x02, 0x04, 0x00, 0x12, 0x04, 0x40, 0x00, 0x46, 0x01, 0x1a, 0xd0, 0x0d, 0x20, 0x41, 0x6e, 0x20,
    0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2f, 0x6c,
    0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x20, 0x54,
    0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
    0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x69, 0x72, 0x0a, 0x20, 0x6f, 0x66, 0x20, 0x64,
    0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
    0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x69,
    0x74, 0x75, 0x64, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
    0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2e, 0x20, 0x55, 0x6e, 0x6c, 0x65,
    0x73, 0x73, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x74,
    0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x75,
    0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
    0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x75, 0x6e, 0x6f, 0x6f, 0x73, 0x61, 0x2e, 0x6f, 0x72,
    0x67, 0x2f, 0x70, 0x64, 0x66, 0x2f, 0x69, 0x63, 0x67, 0x2f, 0x32, 0x30, 0x31, 0x32, 0x2f, 0x74,
    0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x57, 0x47, 0x53, 0x5f, 0x38, 0x34, 0x2e, 0x70,
    0x64, 0x66, 0x22, 0x3e, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64,
    0x61, 0x72, 0x64, 0x3c, 0x2f, 0x61, 0x3e, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
    0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x6e,
    0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
    0x2e, 0x0a, 0x0a, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6e,
    0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64,
    0x65, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x3a, 0x0a, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x64, 0x65, 0x66, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
    0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
    0x75, 0x64, 0x65, 0x29, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x22, 0x22,
    0x57, 0x72, 0x61, 0x70, 0x73, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65,
    0x67, 0x72, 0x65, 0x65, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20,
    0x74, 0x6f, 0x20, 0x5b, 0x2d, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x38, 0x30, 0x2e,
    0x30, 0x5d, 0x2e, 0x22, 0x22, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x71, 0x2c,
    0x20, 0x72, 0x20, 0x3d, 0x20, 0x64, 0x69, 0x76, 0x6d, 0x6f, 0x64, 0x28, 0x6c, 0x6f, 0x6e, 0x67,
    0x69, 0x74, 0x75, 0x64, 0x65, 0x2c, 0x20, 0x33, 0x36, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x72, 0x20, 0x3e, 0x20, 0x31, 0x38, 0x30, 0x2e,
    0x30, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x72, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x38, 0x30, 0x2e, 0x30,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x71, 0x20, 0x3c, 0x3d, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x3a,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
    0x20, 0x72, 0x20, 0x2d, 0x20, 0x33, 0x36, 0x30, 0x2e, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x64, 0x65, 0x66, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61,
    0x74, 0x4c, 0x6e, 0x67, 0x28, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2c, 0x20, 0x6c,
    0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x29, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x22, 0x22, 0x22, 0x57, 0x72, 0x61, 0x70, 0x73, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d,
    0x61, 0x6c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74,
    0x75, 0x64, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
    0x65, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x2d, 0x39, 0x30,
    0x2e, 0x30, 0x2c, 0x20, 0x39, 0x30, 0x2e, 0x30, 0x5d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x5b, 0x2d,
    0x31, 0x38, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x5d, 0x2c, 0x20, 0x72,
    0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x2e, 0x22, 0x22, 0x22, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74,
    0x75, 0x64, 0x65, 0x20, 0x25, 0x20, 0x33, 0x36, 0x30, 0x2e, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x39, 0x30, 0x2e, 0x30, 0x3a,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
    0x20, 0x72, 0x2c, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e,
    0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
    0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x69, 0x66, 0x20, 0x72, 0x20,
    0x3e, 0x3d, 0x20, 0x32, 0x37, 0x30, 0x2e, 0x30, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x33, 0x36,
    0x30, 0x2c, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
    0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x29,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x3a, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x38,
    0x30, 0x20, 0x2d, 0x20, 0x72, 0x2c, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
    0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
    0x75, 0x64, 0x65, 0x20, 0x2b, 0x20, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x20,
    0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
    0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x2d, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x20,
    0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
    0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x2d, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x2d, 0x31, 0x37, 0x39, 0x2e, 0x30,
    0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e,
    0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x28, 0x31, 0x38, 0x31, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20,
    0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
    0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x33, 0x36, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30,
    0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20,
    0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f,
    0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x2d, 0x33,
    0x36, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28, 0x38, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x38,
    0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
    0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x39, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e,
    0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28,
    0x2d, 0x38, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x31, 0x37, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d,
    0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e,
    0x67, 0x28, 0x2d, 0x39, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28, 0x39, 0x30, 0x2e, 0x30,
    0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
    0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x39, 0x30, 0x2e, 0x30, 0x2c,
    0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65,
    0x72, 0x74, 0x20, 0x28, 0x2d, 0x39, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x31, 0x30, 0x2e, 0x30,
    0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61,
    0x74, 0x4c, 0x6e, 0x67, 0x28, 0x2d, 0x39, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x31, 0x30, 0x2e,
    0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28,
    0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x31, 0x37, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20,
    0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28,
    0x2d, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20,
    0x2d, 0x31, 0x37, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
    0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x31, 0x38, 0x30, 0x2e, 0x30,
    0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73,
    0x65, 0x72, 0x74, 0x20, 0x28, 0x2d, 0x39, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30,
    0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61,
    0x74, 0x4c, 0x6e, 0x67, 0x28, 0x32, 0x37, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30,
    0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x28, 0x39,
    0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x4e, 0x6f,
    0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x28, 0x2d, 0x32,
    0x37, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x00, 0x01, 0x12, 0x03, 0x40, 0x08, 0x0e, 0x0a, 0x4f, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00,
    0x12, 0x03, 0x42, 0x02, 0x16, 0x1a, 0x42, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x69,
    0x74, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x2e,
    0x20, 0x49, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x5b, 0x2d, 0x39, 0x30, 0x2e, 0x30, 0x2c,
    0x20, 0x2b, 0x39, 0x30, 0x2e, 0x30, 0x5d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x04, 0x12, 0x04, 0x42, 0x02, 0x40, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x05, 0x12, 0x03, 0x42, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x42, 0x09, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x42,
    0x14, 0x15, 0x0a, 0x52, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x45, 0x02, 0x17, 0x1a,
    0x45, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20,
    0x69, 0x6e, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x6d,
    0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61,
    0x6e, 0x67, 0x65, 0x20, 0x5b, 0x2d, 0x31, 0x38, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2b, 0x31, 0x38,
    0x30, 0x2e, 0x30, 0x5d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12,
    0x04, 0x45, 0x02, 0x42, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03,
    0x45, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x45, 0x09,
    0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x45, 0x15, 0x16, 0x62,
    0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
