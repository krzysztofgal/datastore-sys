// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PartitionId {
    // message fields
    pub project_id: ::std::string::String,
    pub namespace_id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PartitionId {}

impl PartitionId {
    pub fn new() -> PartitionId {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PartitionId {
        static mut instance: ::protobuf::lazy::Lazy<PartitionId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PartitionId,
        };
        unsafe {
            instance.get(PartitionId::new)
        }
    }

    // string project_id = 2;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // string namespace_id = 4;

    pub fn clear_namespace_id(&mut self) {
        self.namespace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace_id(&mut self, v: ::std::string::String) {
        self.namespace_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace_id(&mut self) -> &mut ::std::string::String {
        &mut self.namespace_id
    }

    // Take field
    pub fn take_namespace_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace_id, ::std::string::String::new())
    }

    pub fn get_namespace_id(&self) -> &str {
        &self.namespace_id
    }

    fn get_namespace_id_for_reflect(&self) -> &::std::string::String {
        &self.namespace_id
    }

    fn mut_namespace_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.namespace_id
    }
}

impl ::protobuf::Message for PartitionId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project_id);
        };
        if !self.namespace_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.namespace_id);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(2, &self.project_id)?;
        };
        if !self.namespace_id.is_empty() {
            os.write_string(4, &self.namespace_id)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PartitionId {
    fn new() -> PartitionId {
        PartitionId::new()
    }

    fn descriptor_static(_: ::std::option::Option<PartitionId>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    PartitionId::get_project_id_for_reflect,
                    PartitionId::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "namespace_id",
                    PartitionId::get_namespace_id_for_reflect,
                    PartitionId::mut_namespace_id_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PartitionId>(
                    "PartitionId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PartitionId {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_namespace_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Key {
    // message fields
    partition_id: ::protobuf::SingularPtrField<PartitionId>,
    path: ::protobuf::RepeatedField<Key_PathElement>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Key {}

impl Key {
    pub fn new() -> Key {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Key {
        static mut instance: ::protobuf::lazy::Lazy<Key> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Key,
        };
        unsafe {
            instance.get(Key::new)
        }
    }

    // .google.datastore.v1beta3.PartitionId partition_id = 1;

    pub fn clear_partition_id(&mut self) {
        self.partition_id.clear();
    }

    pub fn has_partition_id(&self) -> bool {
        self.partition_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_id(&mut self, v: PartitionId) {
        self.partition_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_id(&mut self) -> &mut PartitionId {
        if self.partition_id.is_none() {
            self.partition_id.set_default();
        };
        self.partition_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_id(&mut self) -> PartitionId {
        self.partition_id.take().unwrap_or_else(|| PartitionId::new())
    }

    pub fn get_partition_id(&self) -> &PartitionId {
        self.partition_id.as_ref().unwrap_or_else(|| PartitionId::default_instance())
    }

    fn get_partition_id_for_reflect(&self) -> &::protobuf::SingularPtrField<PartitionId> {
        &self.partition_id
    }

    fn mut_partition_id_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<PartitionId> {
        &mut self.partition_id
    }

    // repeated .google.datastore.v1beta3.Key.PathElement path = 2;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::protobuf::RepeatedField<Key_PathElement>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::protobuf::RepeatedField<Key_PathElement> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::protobuf::RepeatedField<Key_PathElement> {
        ::std::mem::replace(&mut self.path, ::protobuf::RepeatedField::new())
    }

    pub fn get_path(&self) -> &[Key_PathElement] {
        &self.path
    }

    fn get_path_for_reflect(&self) -> &::protobuf::RepeatedField<Key_PathElement> {
        &self.path
    }

    fn mut_path_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Key_PathElement> {
        &mut self.path
    }
}

impl ::protobuf::Message for Key {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.partition_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.path {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.partition_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.path {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Key {
    fn new() -> Key {
        Key::new()
    }

    fn descriptor_static(_: ::std::option::Option<Key>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartitionId>>(
                    "partition_id",
                    Key::get_partition_id_for_reflect,
                    Key::mut_partition_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Key_PathElement>>(
                    "path",
                    Key::get_path_for_reflect,
                    Key::mut_path_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Key>(
                    "Key",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Key {
    fn clear(&mut self) {
        self.clear_partition_id();
        self.clear_path();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Key {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Key {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Key_PathElement {
    // message fields
    pub kind: ::std::string::String,
    // message oneof groups
    id_type: ::std::option::Option<Key_PathElement_oneof_id_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Key_PathElement {}

#[derive(Clone,PartialEq)]
pub enum Key_PathElement_oneof_id_type {
    id(i64),
    name(::std::string::String),
}

impl Key_PathElement {
    pub fn new() -> Key_PathElement {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Key_PathElement {
        static mut instance: ::protobuf::lazy::Lazy<Key_PathElement> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Key_PathElement,
        };
        unsafe {
            instance.get(Key_PathElement::new)
        }
    }

    // string kind = 1;

    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    pub fn get_kind(&self) -> &str {
        &self.kind
    }

    fn get_kind_for_reflect(&self) -> &::std::string::String {
        &self.kind
    }

    fn mut_kind_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // int64 id = 2;

    pub fn clear_id(&mut self) {
        self.id_type = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.id_type {
            ::std::option::Option::Some(Key_PathElement_oneof_id_type::id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id_type = ::std::option::Option::Some(Key_PathElement_oneof_id_type::id(v))
    }

    pub fn get_id(&self) -> i64 {
        match self.id_type {
            ::std::option::Option::Some(Key_PathElement_oneof_id_type::id(v)) => v,
            _ => 0,
        }
    }

    // string name = 3;

    pub fn clear_name(&mut self) {
        self.id_type = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self.id_type {
            ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.id_type = ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(_)) = self.id_type {
        } else {
            self.id_type = ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(::std::string::String::new()));
        }
        match self.id_type {
            ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self.id_type.take() {
                ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_name(&self) -> &str {
        match self.id_type {
            ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(ref v)) => v,
            _ => "",
        }
    }
}

impl ::protobuf::Message for Key_PathElement {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.id_type = ::std::option::Option::Some(Key_PathElement_oneof_id_type::id(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.id_type = ::std::option::Option::Some(Key_PathElement_oneof_id_type::name(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        };
        if let ::std::option::Option::Some(ref v) = self.id_type {
            match v {
                &Key_PathElement_oneof_id_type::id(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Key_PathElement_oneof_id_type::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        };
        if let ::std::option::Option::Some(ref v) = self.id_type {
            match v {
                &Key_PathElement_oneof_id_type::id(v) => {
                    os.write_int64(2, v)?;
                },
                &Key_PathElement_oneof_id_type::name(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Key_PathElement {
    fn new() -> Key_PathElement {
        Key_PathElement::new()
    }

    fn descriptor_static(_: ::std::option::Option<Key_PathElement>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "kind",
                    Key_PathElement::get_kind_for_reflect,
                    Key_PathElement::mut_kind_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "id",
                    Key_PathElement::has_id,
                    Key_PathElement::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "name",
                    Key_PathElement::has_name,
                    Key_PathElement::get_name,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Key_PathElement>(
                    "Key_PathElement",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Key_PathElement {
    fn clear(&mut self) {
        self.clear_kind();
        self.clear_id();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Key_PathElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Key_PathElement {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ArrayValue {
    // message fields
    values: ::protobuf::RepeatedField<Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ArrayValue {}

impl ArrayValue {
    pub fn new() -> ArrayValue {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ArrayValue {
        static mut instance: ::protobuf::lazy::Lazy<ArrayValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArrayValue,
        };
        unsafe {
            instance.get(ArrayValue::new)
        }
    }

    // repeated .google.datastore.v1beta3.Value values = 1;

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    pub fn get_values(&self) -> &[Value] {
        &self.values
    }

    fn get_values_for_reflect(&self) -> &::protobuf::RepeatedField<Value> {
        &self.values
    }

    fn mut_values_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Value> {
        &mut self.values
    }
}

impl ::protobuf::Message for ArrayValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ArrayValue {
    fn new() -> ArrayValue {
        ArrayValue::new()
    }

    fn descriptor_static(_: ::std::option::Option<ArrayValue>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "values",
                    ArrayValue::get_values_for_reflect,
                    ArrayValue::mut_values_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ArrayValue>(
                    "ArrayValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ArrayValue {
    fn clear(&mut self) {
        self.clear_values();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArrayValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArrayValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Value {
    // message fields
    pub meaning: i32,
    pub exclude_from_indexes: bool,
    // message oneof groups
    value_type: ::std::option::Option<Value_oneof_value_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Value {}

#[derive(Clone,PartialEq)]
pub enum Value_oneof_value_type {
    null_value(super::struct_pb::NullValue),
    boolean_value(bool),
    integer_value(i64),
    double_value(f64),
    timestamp_value(super::timestamp::Timestamp),
    key_value(Key),
    string_value(::std::string::String),
    blob_value(::std::vec::Vec<u8>),
    geo_point_value(super::latlng::LatLng),
    entity_value(Entity),
    array_value(ArrayValue),
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Value {
        static mut instance: ::protobuf::lazy::Lazy<Value> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Value,
        };
        unsafe {
            instance.get(Value::new)
        }
    }

    // .google.protobuf.NullValue null_value = 11;

    pub fn clear_null_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_null_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::null_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_null_value(&mut self, v: super::struct_pb::NullValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::null_value(v))
    }

    pub fn get_null_value(&self) -> super::struct_pb::NullValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::null_value(v)) => v,
            _ => super::struct_pb::NullValue::NULL_VALUE,
        }
    }

    // bool boolean_value = 1;

    pub fn clear_boolean_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean_value(&mut self, v: bool) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v))
    }

    pub fn get_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v)) => v,
            _ => false,
        }
    }

    // int64 integer_value = 2;

    pub fn clear_integer_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_integer_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer_value(&mut self, v: i64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(v))
    }

    pub fn get_integer_value(&self) -> i64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(v)) => v,
            _ => 0,
        }
    }

    // double double_value = 3;

    pub fn clear_double_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(v))
    }

    pub fn get_double_value(&self) -> f64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(v)) => v,
            _ => 0.,
        }
    }

    // .google.protobuf.Timestamp timestamp_value = 10;

    pub fn clear_timestamp_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_timestamp_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_value(&mut self, v: super::timestamp::Timestamp) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_value(&mut self) -> &mut super::timestamp::Timestamp {
        if let ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(super::timestamp::Timestamp::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_value(&mut self) -> super::timestamp::Timestamp {
        if self.has_timestamp_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v)) => v,
                _ => panic!(),
            }
        } else {
            super::timestamp::Timestamp::new()
        }
    }

    pub fn get_timestamp_value(&self) -> &super::timestamp::Timestamp {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref v)) => v,
            _ => super::timestamp::Timestamp::default_instance(),
        }
    }

    // .google.datastore.v1beta3.Key key_value = 5;

    pub fn clear_key_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_key_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::key_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_key_value(&mut self, v: Key) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::key_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_key_value(&mut self) -> &mut Key {
        if let ::std::option::Option::Some(Value_oneof_value_type::key_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::key_value(Key::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::key_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_key_value(&mut self) -> Key {
        if self.has_key_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::key_value(v)) => v,
                _ => panic!(),
            }
        } else {
            Key::new()
        }
    }

    pub fn get_key_value(&self) -> &Key {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::key_value(ref v)) => v,
            _ => Key::default_instance(),
        }
    }

    // string string_value = 17;

    pub fn clear_string_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Value_oneof_value_type::string_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_string_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref v)) => v,
            _ => "",
        }
    }

    // bytes blob_value = 18;

    pub fn clear_blob_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_blob_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blob_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blob_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Value_oneof_value_type::blob_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(::std::vec::Vec::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blob_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_blob_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::blob_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_blob_value(&self) -> &[u8] {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(ref v)) => v,
            _ => &[],
        }
    }

    // .google.type.LatLng geo_point_value = 8;

    pub fn clear_geo_point_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_geo_point_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_geo_point_value(&mut self, v: super::latlng::LatLng) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_geo_point_value(&mut self) -> &mut super::latlng::LatLng {
        if let ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(super::latlng::LatLng::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_geo_point_value(&mut self) -> super::latlng::LatLng {
        if self.has_geo_point_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(v)) => v,
                _ => panic!(),
            }
        } else {
            super::latlng::LatLng::new()
        }
    }

    pub fn get_geo_point_value(&self) -> &super::latlng::LatLng {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(ref v)) => v,
            _ => super::latlng::LatLng::default_instance(),
        }
    }

    // .google.datastore.v1beta3.Entity entity_value = 6;

    pub fn clear_entity_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_entity_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_entity_value(&mut self, v: Entity) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_entity_value(&mut self) -> &mut Entity {
        if let ::std::option::Option::Some(Value_oneof_value_type::entity_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(Entity::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_entity_value(&mut self) -> Entity {
        if self.has_entity_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::entity_value(v)) => v,
                _ => panic!(),
            }
        } else {
            Entity::new()
        }
    }

    pub fn get_entity_value(&self) -> &Entity {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(ref v)) => v,
            _ => Entity::default_instance(),
        }
    }

    // .google.datastore.v1beta3.ArrayValue array_value = 9;

    pub fn clear_array_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_array_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array_value(&mut self, v: ArrayValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array_value(&mut self) -> &mut ArrayValue {
        if let ::std::option::Option::Some(Value_oneof_value_type::array_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(ArrayValue::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array_value(&mut self) -> ArrayValue {
        if self.has_array_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::array_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ArrayValue::new()
        }
    }

    pub fn get_array_value(&self) -> &ArrayValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref v)) => v,
            _ => ArrayValue::default_instance(),
        }
    }

    // int32 meaning = 14;

    pub fn clear_meaning(&mut self) {
        self.meaning = 0;
    }

    // Param is passed by value, moved
    pub fn set_meaning(&mut self, v: i32) {
        self.meaning = v;
    }

    pub fn get_meaning(&self) -> i32 {
        self.meaning
    }

    fn get_meaning_for_reflect(&self) -> &i32 {
        &self.meaning
    }

    fn mut_meaning_for_reflect(&mut self) -> &mut i32 {
        &mut self.meaning
    }

    // bool exclude_from_indexes = 19;

    pub fn clear_exclude_from_indexes(&mut self) {
        self.exclude_from_indexes = false;
    }

    // Param is passed by value, moved
    pub fn set_exclude_from_indexes(&mut self, v: bool) {
        self.exclude_from_indexes = v;
    }

    pub fn get_exclude_from_indexes(&self) -> bool {
        self.exclude_from_indexes
    }

    fn get_exclude_from_indexes_for_reflect(&self) -> &bool {
        &self.exclude_from_indexes
    }

    fn mut_exclude_from_indexes_for_reflect(&mut self) -> &mut bool {
        &mut self.exclude_from_indexes
    }
}

impl ::protobuf::Message for Value {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::null_value(is.read_enum()?));
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(is.read_double()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::key_value(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(is.read_string()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(is.read_bytes()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.meaning = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.exclude_from_indexes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.meaning != 0 {
            my_size += ::protobuf::rt::value_size(14, self.meaning, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.exclude_from_indexes != false {
            my_size += 3;
        };
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::null_value(v) => {
                    my_size += ::protobuf::rt::enum_size(11, v);
                },
                &Value_oneof_value_type::boolean_value(v) => {
                    my_size += 2;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Value_oneof_value_type::double_value(v) => {
                    my_size += 9;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::key_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(17, &v);
                },
                &Value_oneof_value_type::blob_value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(18, &v);
                },
                &Value_oneof_value_type::geo_point_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::entity_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.meaning != 0 {
            os.write_int32(14, self.meaning)?;
        };
        if self.exclude_from_indexes != false {
            os.write_bool(19, self.exclude_from_indexes)?;
        };
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::null_value(v) => {
                    os.write_enum(11, v.value())?;
                },
                &Value_oneof_value_type::boolean_value(v) => {
                    os.write_bool(1, v)?;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    os.write_int64(2, v)?;
                },
                &Value_oneof_value_type::double_value(v) => {
                    os.write_double(3, v)?;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::key_value(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    os.write_string(17, v)?;
                },
                &Value_oneof_value_type::blob_value(ref v) => {
                    os.write_bytes(18, v)?;
                },
                &Value_oneof_value_type::geo_point_value(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::entity_value(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Value {
    fn new() -> Value {
        Value::new()
    }

    fn descriptor_static(_: ::std::option::Option<Value>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, super::struct_pb::NullValue>(
                    "null_value",
                    Value::has_null_value,
                    Value::get_null_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "boolean_value",
                    Value::has_boolean_value,
                    Value::get_boolean_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "integer_value",
                    Value::has_integer_value,
                    Value::get_integer_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                    "double_value",
                    Value::has_double_value,
                    Value::get_double_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::timestamp::Timestamp>(
                    "timestamp_value",
                    Value::has_timestamp_value,
                    Value::get_timestamp_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Key>(
                    "key_value",
                    Value::has_key_value,
                    Value::get_key_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "string_value",
                    Value::has_string_value,
                    Value::get_string_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "blob_value",
                    Value::has_blob_value,
                    Value::get_blob_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::latlng::LatLng>(
                    "geo_point_value",
                    Value::has_geo_point_value,
                    Value::get_geo_point_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Entity>(
                    "entity_value",
                    Value::has_entity_value,
                    Value::get_entity_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ArrayValue>(
                    "array_value",
                    Value::has_array_value,
                    Value::get_array_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "meaning",
                    Value::get_meaning_for_reflect,
                    Value::mut_meaning_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "exclude_from_indexes",
                    Value::get_exclude_from_indexes_for_reflect,
                    Value::mut_exclude_from_indexes_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Value>(
                    "Value",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Value {
    fn clear(&mut self) {
        self.clear_null_value();
        self.clear_boolean_value();
        self.clear_integer_value();
        self.clear_double_value();
        self.clear_timestamp_value();
        self.clear_key_value();
        self.clear_string_value();
        self.clear_blob_value();
        self.clear_geo_point_value();
        self.clear_entity_value();
        self.clear_array_value();
        self.clear_meaning();
        self.clear_exclude_from_indexes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Entity {
    // message fields
    key: ::protobuf::SingularPtrField<Key>,
    properties: ::std::collections::HashMap<::std::string::String, Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Entity {}

impl Entity {
    pub fn new() -> Entity {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Entity {
        static mut instance: ::protobuf::lazy::Lazy<Entity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Entity,
        };
        unsafe {
            instance.get(Entity::new)
        }
    }

    // .google.datastore.v1beta3.Key key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut Key {
        if self.key.is_none() {
            self.key.set_default();
        };
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> Key {
        self.key.take().unwrap_or_else(|| Key::new())
    }

    pub fn get_key(&self) -> &Key {
        self.key.as_ref().unwrap_or_else(|| Key::default_instance())
    }

    fn get_key_for_reflect(&self) -> &::protobuf::SingularPtrField<Key> {
        &self.key
    }

    fn mut_key_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<Key> {
        &mut self.key
    }

    // repeated .google.datastore.v1beta3.Entity.PropertiesEntry properties = 3;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, Value>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Value> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, Value> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }

    pub fn get_properties(&self) -> &::std::collections::HashMap<::std::string::String, Value> {
        &self.properties
    }

    fn get_properties_for_reflect(&self) -> &::std::collections::HashMap<::std::string::String, Value> {
        &self.properties
    }

    fn mut_properties_for_reflect(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Value> {
        &mut self.properties
    }
}

impl ::protobuf::Message for Entity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(3, &self.properties);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(3, &self.properties, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Entity {
    fn new() -> Entity {
        Entity::new()
    }

    fn descriptor_static(_: ::std::option::Option<Entity>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Key>>(
                    "key",
                    Entity::get_key_for_reflect,
                    Entity::mut_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "properties",
                    Entity::get_properties_for_reflect,
                    Entity::mut_properties_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Entity>(
                    "Entity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Entity {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
    0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
    0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
    0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c,
    0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74,
    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
    0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
    0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61,
    0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x03, 0x4b, 0x65,
    0x79, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
    0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b,
    0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x70,
    0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x54, 0x0a, 0x0b, 0x50, 0x61,
    0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
    0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a,
    0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
    0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
    0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
    0x22, 0x45, 0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37,
    0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
    0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xab, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
    0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
    0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
    0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
    0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c,
    0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c,
    0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
    0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65,
    0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
    0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
    0x6c, 0x6f, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48,
    0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0f,
    0x67, 0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
    0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
    0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65,
    0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c,
    0x75, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
    0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
    0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65,
    0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x13, 0x20,
    0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d,
    0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
    0x79, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
    0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
    0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
    0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
    0x69, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
    0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
    0x02, 0x38, 0x01, 0x42, 0x91, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x42, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74,
    0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61,
    0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x3b, 0x64, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x33, 0x4a, 0xea, 0x3a, 0x0a, 0x07, 0x12, 0x05, 0x0e, 0x00,
    0xca, 0x01, 0x01, 0x0a, 0xbd, 0x04, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x0e, 0x00, 0x12, 0x32, 0xb2,
    0x04, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30, 0x31, 0x36,
    0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x0a, 0x0a, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
    0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74,
    0x68, 0x65, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b, 0x0a, 0x20,
    0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
    0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
    0x0a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
    0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
    0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c,
    0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c,
    0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f,
    0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77,
    0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
    0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e,
    0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
    0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f,
    0x6e, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41, 0x53,
    0x49, 0x53, 0x2c, 0x0a, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52,
    0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49,
    0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x4b, 0x49, 0x4e,
    0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
    0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x53,
    0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
    0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69,
    0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61,
    0x6e, 0x64, 0x0a, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
    0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x20, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x00, 0x12, 0x03, 0x12, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x13, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x14, 0x07, 0x28, 0x0a, 0x09,
    0x0a, 0x02, 0x03, 0x03, 0x12, 0x03, 0x15, 0x07, 0x21, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03,
    0x17, 0x00, 0x3b, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x17, 0x00, 0x3b,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x17, 0x07, 0x17, 0x0a, 0x0d,
    0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x17, 0x07, 0x17, 0x0a, 0x0e, 0x0a,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x17, 0x07, 0x17, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x17, 0x1a, 0x3a, 0x0a, 0x08, 0x0a, 0x01, 0x08,
    0x12, 0x03, 0x18, 0x00, 0x58, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12, 0x03, 0x18,
    0x00, 0x58, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x18, 0x07, 0x11,
    0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x18, 0x07, 0x11, 0x0a,
    0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x18, 0x07, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x18, 0x14, 0x57, 0x0a, 0x08, 0x0a,
    0x01, 0x08, 0x12, 0x03, 0x19, 0x00, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x02, 0x12,
    0x03, 0x19, 0x00, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x12, 0x03, 0x19,
    0x07, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x12, 0x03, 0x19, 0x07,
    0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x19, 0x07,
    0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x03, 0x12, 0x03, 0x19, 0x1d, 0x21, 0x0a,
    0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1a, 0x00, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07,
    0x03, 0x12, 0x03, 0x1a, 0x00, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x12,
    0x03, 0x1a, 0x07, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00, 0x12, 0x03,
    0x1a, 0x07, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x1a, 0x07, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03, 0x07, 0x12, 0x03, 0x1a, 0x1e,
    0x2b, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1b, 0x00, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x08,
    0xe7, 0x07, 0x04, 0x12, 0x03, 0x1b, 0x00, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04,
    0x02, 0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x04, 0x02, 0x00,
    0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x04, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04, 0x07, 0x12, 0x03,
    0x1b, 0x16, 0x34, 0x0a, 0xe1, 0x05, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x31, 0x00, 0x37, 0x01,
    0x1a, 0xd4, 0x05, 0x20, 0x41, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x49, 0x44, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20,
    0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
    0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x0a, 0x20, 0x62, 0x79,
    0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x61, 0x6d,
    0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x49, 0x44,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x0a, 0x0a,
    0x20, 0x41, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c,
    0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0a, 0x20, 0x70, 0x72,
    0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x61, 0x6d,
    0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x20, 0x50, 0x61, 0x72,
    0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
    0x73, 0x3a, 0x0a, 0x0a, 0x20, 0x2d, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x60, 0x22,
    0x22, 0x60, 0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x76,
    0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73,
    0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
    0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x60, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5c,
    0x64, 0x5c, 0x2e, 0x5c, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x60, 0x0a,
    0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66,
    0x20, 0x61, 0x6e, 0x79, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
    0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x60, 0x5f, 0x5f,
    0x2e, 0x2a, 0x5f, 0x5f, 0x60, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x20, 0x41, 0x20,
    0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e,
    0x6c, 0x79, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20,
    0x69, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
    0x65, 0x64, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x20,
    0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x49, 0x44, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x49, 0x44, 0x20, 0x64,
    0x6f, 0x65, 0x73, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x20, 0x49, 0x44, 0x20, 0x29, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63,
    0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x52, 0x65, 0x61, 0x64, 0x73, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6f,
    0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x49, 0x44, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x69, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20,
    0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03,
    0x31, 0x08, 0x13, 0x0a, 0x42, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x33, 0x02, 0x18,
    0x1a, 0x35, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63,
    0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x62,
    0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04,
    0x12, 0x04, 0x33, 0x02, 0x31, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12,
    0x03, 0x33, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x33,
    0x09, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x33, 0x16, 0x17,
    0x0a, 0x52, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x36, 0x02, 0x1a, 0x1a, 0x45, 0x20,
    0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
    0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f,
    0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x36,
    0x02, 0x33, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x36, 0x02,
    0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x36, 0x09, 0x15, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x36, 0x18, 0x19, 0x0a, 0xeb, 0x01,
    0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x3d, 0x00, 0x6e, 0x01, 0x1a, 0xde, 0x01, 0x20, 0x41, 0x20,
    0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
    0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
    0x0a, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72,
    0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79,
    0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6b, 0x69, 0x6e,
    0x64, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x0a,
    0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f,
    0x6e, 0x6c, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x73, 0x20,
    0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e,
    0x6c, 0x79, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f,
    0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65,
    0x72, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
    0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x01, 0x01, 0x12, 0x03, 0x3d, 0x08, 0x0b, 0x0a, 0xac, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x03, 0x00,
    0x12, 0x04, 0x42, 0x02, 0x56, 0x03, 0x1a, 0x9d, 0x01, 0x20, 0x41, 0x20, 0x28, 0x6b, 0x69, 0x6e,
    0x64, 0x2c, 0x20, 0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x70, 0x61, 0x69, 0x72,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
    0x63, 0x74, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x0a, 0x0a,
    0x20, 0x49, 0x66, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
    0x6f, 0x72, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d,
    0x70, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x65, 0x69, 0x74, 0x68,
    0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
    0x6c, 0x65, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x03, 0x00, 0x01, 0x12,
    0x03, 0x42, 0x0a, 0x15, 0x0a, 0xb3, 0x01, 0x0a, 0x06, 0x04, 0x01, 0x03, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x47, 0x04, 0x14, 0x1a, 0xa3, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a,
    0x20, 0x41, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
    0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x60, 0x5f, 0x5f, 0x2e, 0x2a, 0x5f, 0x5f, 0x60, 0x20,
    0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x61, 0x64,
    0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6d,
    0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20,
    0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x31, 0x35, 0x30, 0x30, 0x20, 0x62,
    0x79, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20,
    0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
    0x20, 0x62, 0x65, 0x20, 0x60, 0x22, 0x22, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x01,
    0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x47, 0x04, 0x42, 0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x01, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x47, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x01, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x47, 0x0b, 0x0f, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x01, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x47, 0x12, 0x13, 0x0a, 0x21, 0x0a, 0x06, 0x04,
    0x01, 0x03, 0x00, 0x08, 0x00, 0x12, 0x04, 0x4a, 0x04, 0x55, 0x05, 0x1a, 0x11, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x01, 0x03, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x4a, 0x0a, 0x11, 0x0a, 0x9b,
    0x01, 0x0a, 0x06, 0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x4e, 0x06, 0x13, 0x1a, 0x8b,
    0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
    0x61, 0x74, 0x65, 0x64, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x20, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x65, 0x71,
    0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x2e, 0x20, 0x56, 0x61, 0x6c,
    0x75, 0x65, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x7a, 0x65,
    0x72, 0x6f, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67,
    0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x0a, 0x20,
    0x62, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x4e, 0x06, 0x0b, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4e, 0x0c, 0x0e, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x01, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x4e, 0x11, 0x12, 0x0a, 0xae, 0x01, 0x0a,
    0x06, 0x04, 0x01, 0x03, 0x00, 0x02, 0x02, 0x12, 0x03, 0x54, 0x06, 0x16, 0x1a, 0x9e, 0x01, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
    0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x60,
    0x5f, 0x5f, 0x2e, 0x2a, 0x5f, 0x5f, 0x60, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72,
    0x76, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x20,
    0x41, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20,
    0x62, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x31, 0x35, 0x30,
    0x30, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x54, 0x46,
    0x2d, 0x38, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x43, 0x61, 0x6e,
    0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x60, 0x22, 0x22, 0x60, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x01, 0x03, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x54, 0x06, 0x0c, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x01, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x54, 0x0d, 0x11, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x01, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x54, 0x14, 0x15, 0x0a, 0x99, 0x01,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x5b, 0x02, 0x1f, 0x1a, 0x8b, 0x01, 0x20, 0x45,
    0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x62,
    0x73, 0x65, 0x74, 0x73, 0x2c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20,
    0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20,
    0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x0a, 0x20, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x49, 0x44, 0x2e, 0x0a, 0x20, 0x51,
    0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
    0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x00, 0x04, 0x12, 0x04, 0x5b, 0x02, 0x56, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x06, 0x12, 0x03, 0x5b, 0x02, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x5b, 0x0e, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x5b,
    0x1d, 0x1e, 0x0a, 0xf4, 0x06, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x6d, 0x02, 0x20,
    0x1a, 0xe6, 0x06, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
    0x61, 0x74, 0x68, 0x2e, 0x0a, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
    0x70, 0x61, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66,
    0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x6c, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f,
    0x66, 0x20, 0x61, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x0a, 0x20,
    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
    0x63, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2c, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72,
    0x73, 0x74, 0x0a, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e,
    0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f,
    0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
    0x69, 0x66, 0x69, 0x65, 0x73, 0x0a, 0x20, 0x61, 0x20, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x65,
    0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
    0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x0a, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2c,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x2e, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e,
    0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x72,
    0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
    0x61, 0x74, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x5f, 0x61, 0x6e,
    0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x2e, 0x0a, 0x0a, 0x20, 0x41, 0x6e, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c,
    0x77, 0x61, 0x79, 0x73, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
    0x65, 0x74, 0x65, 0x3a, 0x20, 0x2a, 0x61, 0x6c, 0x6c, 0x2a, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x61, 0x6e, 0x63, 0x65, 0x73,
    0x74, 0x6f, 0x72, 0x73, 0x0a, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x70, 0x61, 0x74, 0x68, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
    0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2e, 0x0a, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d,
    0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x73,
    0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
    0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
    0x70, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x29, 0x20, 0x69, 0x74,
    0x73, 0x65, 0x6c, 0x66, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6d, 0x69, 0x74,
    0x74, 0x65, 0x64, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
    0x2c, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68,
    0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6b, 0x65, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x60, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x20, 0x6e, 0x6f, 0x0a, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
    0x2e, 0x0a, 0x0a, 0x20, 0x41, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e,
    0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x61, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x68, 0x61,
    0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x30, 0x30, 0x20, 0x65,
    0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x6d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06,
    0x12, 0x03, 0x6d, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x6d, 0x17, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x6d, 0x1e,
    0x1f, 0x0a, 0x1d, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x71, 0x00, 0x76, 0x01, 0x1a, 0x11, 0x20,
    0x41, 0x6e, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x71, 0x08, 0x12, 0x0a, 0x88, 0x01, 0x0a,
    0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x75, 0x02, 0x1c, 0x1a, 0x7b, 0x20, 0x56, 0x61, 0x6c,
    0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79,
    0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20,
    0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61,
    0x20, 0x6d, 0x69, 0x78, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x20, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04,
    0x12, 0x03, 0x75, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12, 0x03,
    0x75, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x75, 0x11,
    0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x75, 0x1a, 0x1b, 0x0a,
    0x61, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x05, 0x7a, 0x00, 0xb3, 0x01, 0x01, 0x1a, 0x54, 0x20, 0x41,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61,
    0x6e, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x73, 0x6f,
    0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
    0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x7a, 0x08, 0x0d, 0x0a, 0x27,
    0x0a, 0x04, 0x04, 0x03, 0x08, 0x00, 0x12, 0x05, 0x7c, 0x02, 0xab, 0x01, 0x03, 0x1a, 0x18, 0x20,
    0x4d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x08, 0x00, 0x01,
    0x12, 0x03, 0x7c, 0x08, 0x12, 0x0a, 0x1c, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x7e,
    0x04, 0x2e, 0x1a, 0x0f, 0x20, 0x41, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06, 0x12, 0x03, 0x7e, 0x04,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x7e, 0x1e, 0x28, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x7e, 0x2b, 0x2d, 0x0a, 0x20, 0x0a,
    0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x04, 0x81, 0x01, 0x04, 0x1b, 0x1a, 0x12, 0x20, 0x41, 0x20,
    0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x05, 0x12, 0x04, 0x81, 0x01, 0x04, 0x08, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x04, 0x81, 0x01, 0x09, 0x16, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x04, 0x81, 0x01, 0x19, 0x1a, 0x0a, 0x21, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x02, 0x12, 0x04, 0x84, 0x01, 0x04, 0x1c, 0x1a, 0x13, 0x20, 0x41, 0x6e, 0x20,
    0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x05, 0x12, 0x04, 0x84, 0x01, 0x04, 0x09, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01, 0x12, 0x04, 0x84, 0x01, 0x0a, 0x17, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12, 0x04, 0x84, 0x01, 0x1a, 0x1b, 0x0a, 0x1f, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x03, 0x12, 0x04, 0x87, 0x01, 0x04, 0x1c, 0x1a, 0x11, 0x20, 0x41, 0x20, 0x64,
    0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x03, 0x05, 0x12, 0x04, 0x87, 0x01, 0x04, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x03, 0x01, 0x12, 0x04, 0x87, 0x01, 0x0b, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x03, 0x03, 0x12, 0x04, 0x87, 0x01, 0x1a, 0x1b, 0x0a, 0x8a, 0x01, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x04, 0x12, 0x04, 0x8c, 0x01, 0x04, 0x33, 0x1a, 0x7c, 0x20, 0x41, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x20,
    0x57, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x70, 0x72,
    0x65, 0x63, 0x69, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x69,
    0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3b, 0x0a, 0x20, 0x61, 0x6e, 0x79,
    0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63,
    0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
    0x20, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x06,
    0x12, 0x04, 0x8c, 0x01, 0x04, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x8c, 0x01, 0x1e, 0x2d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x03, 0x12, 0x04,
    0x8c, 0x01, 0x30, 0x32, 0x0a, 0x1c, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x05, 0x12, 0x04, 0x8f, 0x01,
    0x04, 0x16, 0x1a, 0x0e, 0x20, 0x41, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x06, 0x12, 0x04, 0x8f, 0x01, 0x04,
    0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x01, 0x12, 0x04, 0x8f, 0x01, 0x08, 0x11,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x03, 0x12, 0x04, 0x8f, 0x01, 0x14, 0x15, 0x0a,
    0xb7, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x06, 0x12, 0x04, 0x94, 0x01, 0x04, 0x1d, 0x1a, 0xa8,
    0x01, 0x20, 0x41, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
    0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a,
    0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x60, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66,
    0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x60, 0x20, 0x69, 0x73, 0x20,
    0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x28, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x64,
    0x65, 0x78, 0x65, 0x64, 0x29, 0x20, 0x2c, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,
    0x20, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x35, 0x30, 0x30, 0x20, 0x62, 0x79,
    0x74, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2c,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61,
    0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x31, 0x2c, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x30,
    0x30, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x06, 0x05, 0x12, 0x04, 0x94, 0x01, 0x04, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x06,
    0x01, 0x12, 0x04, 0x94, 0x01, 0x0b, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03,
    0x12, 0x04, 0x94, 0x01, 0x1a, 0x1c, 0x0a, 0xb0, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x07, 0x12,
    0x04, 0x9a, 0x01, 0x04, 0x1a, 0x1a, 0xa1, 0x01, 0x20, 0x41, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,
    0x20, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x2c, 0x30, 0x30, 0x30, 0x2c, 0x30,
    0x30, 0x30, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20,
    0x60, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
    0x64, 0x65, 0x78, 0x65, 0x73, 0x60, 0x20, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x73,
    0x74, 0x20, 0x31, 0x35, 0x30, 0x30, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x49,
    0x6e, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2c,
    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x2d,
    0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x07, 0x05, 0x12, 0x04, 0x9a, 0x01, 0x04, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x07,
    0x01, 0x12, 0x04, 0x9a, 0x01, 0x0a, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x07, 0x03,
    0x12, 0x04, 0x9a, 0x01, 0x17, 0x19, 0x0a, 0x4f, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x08, 0x12, 0x04,
    0x9d, 0x01, 0x04, 0x2b, 0x1a, 0x41, 0x20, 0x41, 0x20, 0x67, 0x65, 0x6f, 0x20, 0x70, 0x6f, 0x69,
    0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
    0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x45, 0x61, 0x72, 0x74, 0x68, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x06,
    0x12, 0x04, 0x9d, 0x01, 0x04, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x01, 0x12,
    0x04, 0x9d, 0x01, 0x17, 0x26, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x03, 0x12, 0x04,
    0x9d, 0x01, 0x29, 0x2a, 0x0a, 0x8a, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x09, 0x12, 0x04, 0xa4,
    0x01, 0x04, 0x1c, 0x1a, 0x7c, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x2d, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x68,
    0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x4d,
    0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x69,
    0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
    0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x4d, 0x61,
    0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x64, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x06, 0x12, 0x04, 0xa4, 0x01, 0x04, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x0b, 0x17, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x03, 0x12, 0x04, 0xa4, 0x01, 0x1a, 0x1b, 0x0a, 0xb1,
    0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x0a, 0x12, 0x04, 0xaa, 0x01, 0x04, 0x1f, 0x1a, 0xa2, 0x01,
    0x20, 0x41, 0x6e, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
    0x0a, 0x20, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
    0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x60, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x60,
    0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73,
    0x65, 0x74, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x60, 0x61, 0x72, 0x72, 0x61, 0x79,
    0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x60, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x0a, 0x20, 0x60, 0x6d, 0x65,
    0x61, 0x6e, 0x69, 0x6e, 0x67, 0x60, 0x20, 0x6f, 0x72, 0x20, 0x60, 0x65, 0x78, 0x63, 0x6c, 0x75,
    0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x60,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x06, 0x12, 0x04, 0xaa, 0x01, 0x04,
    0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x0f, 0x1a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x03, 0x12, 0x04, 0xaa, 0x01, 0x1d, 0x1e, 0x0a,
    0x59, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x0b, 0x12, 0x04, 0xae, 0x01, 0x02, 0x15, 0x1a, 0x4b, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x60, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x60, 0x20, 0x66, 0x69,
    0x65, 0x6c, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
    0x62, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
    0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x0b, 0x04, 0x12, 0x06, 0xae, 0x01, 0x02, 0xab, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x0b, 0x05, 0x12, 0x04, 0xae, 0x01, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x0b, 0x01, 0x12, 0x04, 0xae, 0x01, 0x08, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x0b, 0x03, 0x12, 0x04, 0xae, 0x01, 0x12, 0x14, 0x0a, 0x65, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x0c,
    0x12, 0x04, 0xb2, 0x01, 0x02, 0x21, 0x1a, 0x57, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
    0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6c,
    0x6c, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
    0x64, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x2e, 0x0a, 0x0a,
    0x0f, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0c, 0x04, 0x12, 0x06, 0xb2, 0x01, 0x02, 0xae, 0x01, 0x15,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0c, 0x05, 0x12, 0x04, 0xb2, 0x01, 0x02, 0x06, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0c, 0x01, 0x12, 0x04, 0xb2, 0x01, 0x07, 0x1b, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x0c, 0x03, 0x12, 0x04, 0xb2, 0x01, 0x1e, 0x20, 0x0a, 0xba, 0x01,
    0x0a, 0x02, 0x04, 0x04, 0x12, 0x06, 0xba, 0x01, 0x00, 0xca, 0x01, 0x01, 0x1a, 0xab, 0x01, 0x20,
    0x41, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
    0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x0a, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x31, 0x20, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x61, 0x74, 0x20,
    0x5f, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6c, 0x79, 0x5f, 0x0a, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x6d, 0x69,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x31, 0x20, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
    0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x04,
    0x01, 0x12, 0x04, 0xba, 0x01, 0x08, 0x0e, 0x0a, 0xf2, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00,
    0x12, 0x04, 0xc1, 0x01, 0x02, 0x0e, 0x1a, 0xe3, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x20, 0x41, 0x6e,
    0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2c, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20,
    0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
    0x6e, 0x74, 0x65, 0x64, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x2c, 0x0a, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x6e,
    0x20, 0x60, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76,
    0x61, 0x6c, 0x75, 0x65, 0x60, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e,
    0x6f, 0x20, 0x6b, 0x65, 0x79, 0x29, 0x2e, 0x0a, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x27, 0x73, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x69, 0x74, 0x73,
    0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x27, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74,
    0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2c,
    0x0a, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20,
    0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x06, 0xc1, 0x01, 0x02, 0xba, 0x01, 0x10, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12, 0x04, 0xc1, 0x01, 0x02, 0x05, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x04, 0xc1, 0x01, 0x06, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x00, 0x03, 0x12, 0x04, 0xc1, 0x01, 0x0c, 0x0d, 0x0a, 0x99, 0x02, 0x0a, 0x04, 0x04,
    0x04, 0x02, 0x01, 0x12, 0x04, 0xc9, 0x01, 0x02, 0x24, 0x1a, 0x8a, 0x02, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
    0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x70, 0x27, 0x73,
    0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
    0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x70, 0x72, 0x6f,
    0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
    0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x60, 0x5f, 0x5f, 0x2e, 0x2a, 0x5f,
    0x5f, 0x60, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x0a,
    0x20, 0x41, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70,
    0x65, 0x72, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x72,
    0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
    0x6e, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e,
    0x74, 0x65, 0x78, 0x74, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
    0x6e, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x35, 0x30, 0x30, 0x20,
    0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20,
    0x60, 0x22, 0x22, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12,
    0x06, 0xc9, 0x01, 0x02, 0xc1, 0x01, 0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x06,
    0x12, 0x04, 0xc9, 0x01, 0x02, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12,
    0x04, 0xc9, 0x01, 0x15, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x04,
    0xc9, 0x01, 0x22, 0x23, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
