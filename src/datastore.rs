// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LookupRequest {
    // message fields
    pub project_id: ::std::string::String,
    read_options: ::protobuf::SingularPtrField<ReadOptions>,
    keys: ::protobuf::RepeatedField<super::entity::Key>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LookupRequest {}

impl LookupRequest {
    pub fn new() -> LookupRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LookupRequest {
        static mut instance: ::protobuf::lazy::Lazy<LookupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LookupRequest,
        };
        unsafe {
            instance.get(LookupRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // .google.datastore.v1beta3.ReadOptions read_options = 1;

    pub fn clear_read_options(&mut self) {
        self.read_options.clear();
    }

    pub fn has_read_options(&self) -> bool {
        self.read_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_options(&mut self, v: ReadOptions) {
        self.read_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_options(&mut self) -> &mut ReadOptions {
        if self.read_options.is_none() {
            self.read_options.set_default();
        };
        self.read_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_options(&mut self) -> ReadOptions {
        self.read_options.take().unwrap_or_else(|| ReadOptions::new())
    }

    pub fn get_read_options(&self) -> &ReadOptions {
        self.read_options.as_ref().unwrap_or_else(|| ReadOptions::default_instance())
    }

    fn get_read_options_for_reflect(&self) -> &::protobuf::SingularPtrField<ReadOptions> {
        &self.read_options
    }

    fn mut_read_options_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<ReadOptions> {
        &mut self.read_options
    }

    // repeated .google.datastore.v1beta3.Key keys = 3;

    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<super::entity::Key>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<super::entity::Key> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    pub fn get_keys(&self) -> &[super::entity::Key] {
        &self.keys
    }

    fn get_keys_for_reflect(&self) -> &::protobuf::RepeatedField<super::entity::Key> {
        &self.keys
    }

    fn mut_keys_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }
}

impl ::protobuf::Message for LookupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_options)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        if let Some(v) = self.read_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        if let Some(v) = self.read_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.keys {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LookupRequest {
    fn new() -> LookupRequest {
        LookupRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<LookupRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    LookupRequest::get_project_id_for_reflect,
                    LookupRequest::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadOptions>>(
                    "read_options",
                    LookupRequest::get_read_options_for_reflect,
                    LookupRequest::mut_read_options_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Key>>(
                    "keys",
                    LookupRequest::get_keys_for_reflect,
                    LookupRequest::mut_keys_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LookupRequest>(
                    "LookupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LookupRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_read_options();
        self.clear_keys();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupResponse {
    // message fields
    found: ::protobuf::RepeatedField<super::query::EntityResult>,
    missing: ::protobuf::RepeatedField<super::query::EntityResult>,
    deferred: ::protobuf::RepeatedField<super::entity::Key>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for LookupResponse {}

impl LookupResponse {
    pub fn new() -> LookupResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static LookupResponse {
        static mut instance: ::protobuf::lazy::Lazy<LookupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LookupResponse,
        };
        unsafe {
            instance.get(LookupResponse::new)
        }
    }

    // repeated .google.datastore.v1beta3.EntityResult found = 1;

    pub fn clear_found(&mut self) {
        self.found.clear();
    }

    // Param is passed by value, moved
    pub fn set_found(&mut self, v: ::protobuf::RepeatedField<super::query::EntityResult>) {
        self.found = v;
    }

    // Mutable pointer to the field.
    pub fn mut_found(&mut self) -> &mut ::protobuf::RepeatedField<super::query::EntityResult> {
        &mut self.found
    }

    // Take field
    pub fn take_found(&mut self) -> ::protobuf::RepeatedField<super::query::EntityResult> {
        ::std::mem::replace(&mut self.found, ::protobuf::RepeatedField::new())
    }

    pub fn get_found(&self) -> &[super::query::EntityResult] {
        &self.found
    }

    fn get_found_for_reflect(&self) -> &::protobuf::RepeatedField<super::query::EntityResult> {
        &self.found
    }

    fn mut_found_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::query::EntityResult> {
        &mut self.found
    }

    // repeated .google.datastore.v1beta3.EntityResult missing = 2;

    pub fn clear_missing(&mut self) {
        self.missing.clear();
    }

    // Param is passed by value, moved
    pub fn set_missing(&mut self, v: ::protobuf::RepeatedField<super::query::EntityResult>) {
        self.missing = v;
    }

    // Mutable pointer to the field.
    pub fn mut_missing(&mut self) -> &mut ::protobuf::RepeatedField<super::query::EntityResult> {
        &mut self.missing
    }

    // Take field
    pub fn take_missing(&mut self) -> ::protobuf::RepeatedField<super::query::EntityResult> {
        ::std::mem::replace(&mut self.missing, ::protobuf::RepeatedField::new())
    }

    pub fn get_missing(&self) -> &[super::query::EntityResult] {
        &self.missing
    }

    fn get_missing_for_reflect(&self) -> &::protobuf::RepeatedField<super::query::EntityResult> {
        &self.missing
    }

    fn mut_missing_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::query::EntityResult> {
        &mut self.missing
    }

    // repeated .google.datastore.v1beta3.Key deferred = 3;

    pub fn clear_deferred(&mut self) {
        self.deferred.clear();
    }

    // Param is passed by value, moved
    pub fn set_deferred(&mut self, v: ::protobuf::RepeatedField<super::entity::Key>) {
        self.deferred = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deferred(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.deferred
    }

    // Take field
    pub fn take_deferred(&mut self) -> ::protobuf::RepeatedField<super::entity::Key> {
        ::std::mem::replace(&mut self.deferred, ::protobuf::RepeatedField::new())
    }

    pub fn get_deferred(&self) -> &[super::entity::Key] {
        &self.deferred
    }

    fn get_deferred_for_reflect(&self) -> &::protobuf::RepeatedField<super::entity::Key> {
        &self.deferred
    }

    fn mut_deferred_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.deferred
    }
}

impl ::protobuf::Message for LookupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.found)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.missing)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deferred)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.found {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.missing {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.deferred {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.found {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.missing {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.deferred {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for LookupResponse {
    fn new() -> LookupResponse {
        LookupResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<LookupResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::EntityResult>>(
                    "found",
                    LookupResponse::get_found_for_reflect,
                    LookupResponse::mut_found_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::EntityResult>>(
                    "missing",
                    LookupResponse::get_missing_for_reflect,
                    LookupResponse::mut_missing_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Key>>(
                    "deferred",
                    LookupResponse::get_deferred_for_reflect,
                    LookupResponse::mut_deferred_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LookupResponse>(
                    "LookupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for LookupResponse {
    fn clear(&mut self) {
        self.clear_found();
        self.clear_missing();
        self.clear_deferred();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunQueryRequest {
    // message fields
    pub project_id: ::std::string::String,
    partition_id: ::protobuf::SingularPtrField<super::entity::PartitionId>,
    read_options: ::protobuf::SingularPtrField<ReadOptions>,
    // message oneof groups
    query_type: ::std::option::Option<RunQueryRequest_oneof_query_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RunQueryRequest {}

#[derive(Clone,PartialEq)]
pub enum RunQueryRequest_oneof_query_type {
    query(super::query::Query),
    gql_query(super::query::GqlQuery),
}

impl RunQueryRequest {
    pub fn new() -> RunQueryRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RunQueryRequest {
        static mut instance: ::protobuf::lazy::Lazy<RunQueryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunQueryRequest,
        };
        unsafe {
            instance.get(RunQueryRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // .google.datastore.v1beta3.PartitionId partition_id = 2;

    pub fn clear_partition_id(&mut self) {
        self.partition_id.clear();
    }

    pub fn has_partition_id(&self) -> bool {
        self.partition_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_id(&mut self, v: super::entity::PartitionId) {
        self.partition_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_id(&mut self) -> &mut super::entity::PartitionId {
        if self.partition_id.is_none() {
            self.partition_id.set_default();
        };
        self.partition_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_id(&mut self) -> super::entity::PartitionId {
        self.partition_id.take().unwrap_or_else(|| super::entity::PartitionId::new())
    }

    pub fn get_partition_id(&self) -> &super::entity::PartitionId {
        self.partition_id.as_ref().unwrap_or_else(|| super::entity::PartitionId::default_instance())
    }

    fn get_partition_id_for_reflect(&self) -> &::protobuf::SingularPtrField<super::entity::PartitionId> {
        &self.partition_id
    }

    fn mut_partition_id_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::entity::PartitionId> {
        &mut self.partition_id
    }

    // .google.datastore.v1beta3.ReadOptions read_options = 1;

    pub fn clear_read_options(&mut self) {
        self.read_options.clear();
    }

    pub fn has_read_options(&self) -> bool {
        self.read_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_options(&mut self, v: ReadOptions) {
        self.read_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_options(&mut self) -> &mut ReadOptions {
        if self.read_options.is_none() {
            self.read_options.set_default();
        };
        self.read_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_options(&mut self) -> ReadOptions {
        self.read_options.take().unwrap_or_else(|| ReadOptions::new())
    }

    pub fn get_read_options(&self) -> &ReadOptions {
        self.read_options.as_ref().unwrap_or_else(|| ReadOptions::default_instance())
    }

    fn get_read_options_for_reflect(&self) -> &::protobuf::SingularPtrField<ReadOptions> {
        &self.read_options
    }

    fn mut_read_options_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<ReadOptions> {
        &mut self.read_options
    }

    // .google.datastore.v1beta3.Query query = 3;

    pub fn clear_query(&mut self) {
        self.query_type = ::std::option::Option::None;
    }

    pub fn has_query(&self) -> bool {
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: super::query::Query) {
        self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(v))
    }

    // Mutable pointer to the field.
    pub fn mut_query(&mut self) -> &mut super::query::Query {
        if let ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(_)) = self.query_type {
        } else {
            self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(super::query::Query::new()));
        }
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_query(&mut self) -> super::query::Query {
        if self.has_query() {
            match self.query_type.take() {
                ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(v)) => v,
                _ => panic!(),
            }
        } else {
            super::query::Query::new()
        }
    }

    pub fn get_query(&self) -> &super::query::Query {
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(ref v)) => v,
            _ => super::query::Query::default_instance(),
        }
    }

    // .google.datastore.v1beta3.GqlQuery gql_query = 7;

    pub fn clear_gql_query(&mut self) {
        self.query_type = ::std::option::Option::None;
    }

    pub fn has_gql_query(&self) -> bool {
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gql_query(&mut self, v: super::query::GqlQuery) {
        self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gql_query(&mut self) -> &mut super::query::GqlQuery {
        if let ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(_)) = self.query_type {
        } else {
            self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(super::query::GqlQuery::new()));
        }
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gql_query(&mut self) -> super::query::GqlQuery {
        if self.has_gql_query() {
            match self.query_type.take() {
                ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(v)) => v,
                _ => panic!(),
            }
        } else {
            super::query::GqlQuery::new()
        }
    }

    pub fn get_gql_query(&self) -> &super::query::GqlQuery {
        match self.query_type {
            ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(ref v)) => v,
            _ => super::query::GqlQuery::default_instance(),
        }
    }
}

impl ::protobuf::Message for RunQueryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_id)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_options)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::query(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.query_type = ::std::option::Option::Some(RunQueryRequest_oneof_query_type::gql_query(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        if let Some(v) = self.partition_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.read_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.query_type {
            match v {
                &RunQueryRequest_oneof_query_type::query(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RunQueryRequest_oneof_query_type::gql_query(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        if let Some(v) = self.partition_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.read_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.query_type {
            match v {
                &RunQueryRequest_oneof_query_type::query(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RunQueryRequest_oneof_query_type::gql_query(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RunQueryRequest {
    fn new() -> RunQueryRequest {
        RunQueryRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<RunQueryRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    RunQueryRequest::get_project_id_for_reflect,
                    RunQueryRequest::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::PartitionId>>(
                    "partition_id",
                    RunQueryRequest::get_partition_id_for_reflect,
                    RunQueryRequest::mut_partition_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadOptions>>(
                    "read_options",
                    RunQueryRequest::get_read_options_for_reflect,
                    RunQueryRequest::mut_read_options_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::query::Query>(
                    "query",
                    RunQueryRequest::has_query,
                    RunQueryRequest::get_query,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::query::GqlQuery>(
                    "gql_query",
                    RunQueryRequest::has_gql_query,
                    RunQueryRequest::get_gql_query,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunQueryRequest>(
                    "RunQueryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RunQueryRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_partition_id();
        self.clear_read_options();
        self.clear_query();
        self.clear_gql_query();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunQueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunQueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunQueryResponse {
    // message fields
    batch: ::protobuf::SingularPtrField<super::query::QueryResultBatch>,
    query: ::protobuf::SingularPtrField<super::query::Query>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RunQueryResponse {}

impl RunQueryResponse {
    pub fn new() -> RunQueryResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RunQueryResponse {
        static mut instance: ::protobuf::lazy::Lazy<RunQueryResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunQueryResponse,
        };
        unsafe {
            instance.get(RunQueryResponse::new)
        }
    }

    // .google.datastore.v1beta3.QueryResultBatch batch = 1;

    pub fn clear_batch(&mut self) {
        self.batch.clear();
    }

    pub fn has_batch(&self) -> bool {
        self.batch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: super::query::QueryResultBatch) {
        self.batch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch(&mut self) -> &mut super::query::QueryResultBatch {
        if self.batch.is_none() {
            self.batch.set_default();
        };
        self.batch.as_mut().unwrap()
    }

    // Take field
    pub fn take_batch(&mut self) -> super::query::QueryResultBatch {
        self.batch.take().unwrap_or_else(|| super::query::QueryResultBatch::new())
    }

    pub fn get_batch(&self) -> &super::query::QueryResultBatch {
        self.batch.as_ref().unwrap_or_else(|| super::query::QueryResultBatch::default_instance())
    }

    fn get_batch_for_reflect(&self) -> &::protobuf::SingularPtrField<super::query::QueryResultBatch> {
        &self.batch
    }

    fn mut_batch_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::query::QueryResultBatch> {
        &mut self.batch
    }

    // .google.datastore.v1beta3.Query query = 2;

    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    pub fn has_query(&self) -> bool {
        self.query.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: super::query::Query) {
        self.query = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut super::query::Query {
        if self.query.is_none() {
            self.query.set_default();
        };
        self.query.as_mut().unwrap()
    }

    // Take field
    pub fn take_query(&mut self) -> super::query::Query {
        self.query.take().unwrap_or_else(|| super::query::Query::new())
    }

    pub fn get_query(&self) -> &super::query::Query {
        self.query.as_ref().unwrap_or_else(|| super::query::Query::default_instance())
    }

    fn get_query_for_reflect(&self) -> &::protobuf::SingularPtrField<super::query::Query> {
        &self.query
    }

    fn mut_query_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::query::Query> {
        &mut self.query
    }
}

impl ::protobuf::Message for RunQueryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.batch)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.batch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.batch.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.query.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RunQueryResponse {
    fn new() -> RunQueryResponse {
        RunQueryResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<RunQueryResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::QueryResultBatch>>(
                    "batch",
                    RunQueryResponse::get_batch_for_reflect,
                    RunQueryResponse::mut_batch_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::Query>>(
                    "query",
                    RunQueryResponse::get_query_for_reflect,
                    RunQueryResponse::mut_query_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunQueryResponse>(
                    "RunQueryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RunQueryResponse {
    fn clear(&mut self) {
        self.clear_batch();
        self.clear_query();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunQueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunQueryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginTransactionRequest {
    // message fields
    pub project_id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for BeginTransactionRequest {}

impl BeginTransactionRequest {
    pub fn new() -> BeginTransactionRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static BeginTransactionRequest {
        static mut instance: ::protobuf::lazy::Lazy<BeginTransactionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeginTransactionRequest,
        };
        unsafe {
            instance.get(BeginTransactionRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }
}

impl ::protobuf::Message for BeginTransactionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for BeginTransactionRequest {
    fn new() -> BeginTransactionRequest {
        BeginTransactionRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<BeginTransactionRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    BeginTransactionRequest::get_project_id_for_reflect,
                    BeginTransactionRequest::mut_project_id_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeginTransactionRequest>(
                    "BeginTransactionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for BeginTransactionRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginTransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginTransactionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginTransactionResponse {
    // message fields
    pub transaction: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for BeginTransactionResponse {}

impl BeginTransactionResponse {
    pub fn new() -> BeginTransactionResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static BeginTransactionResponse {
        static mut instance: ::protobuf::lazy::Lazy<BeginTransactionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeginTransactionResponse,
        };
        unsafe {
            instance.get(BeginTransactionResponse::new)
        }
    }

    // bytes transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction, ::std::vec::Vec::new())
    }

    pub fn get_transaction(&self) -> &[u8] {
        &self.transaction
    }

    fn get_transaction_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.transaction
    }

    fn mut_transaction_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction
    }
}

impl ::protobuf::Message for BeginTransactionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.transaction.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.transaction);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.transaction.is_empty() {
            os.write_bytes(1, &self.transaction)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for BeginTransactionResponse {
    fn new() -> BeginTransactionResponse {
        BeginTransactionResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<BeginTransactionResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction",
                    BeginTransactionResponse::get_transaction_for_reflect,
                    BeginTransactionResponse::mut_transaction_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeginTransactionResponse>(
                    "BeginTransactionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for BeginTransactionResponse {
    fn clear(&mut self) {
        self.clear_transaction();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginTransactionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginTransactionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackRequest {
    // message fields
    pub project_id: ::std::string::String,
    pub transaction: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RollbackRequest {}

impl RollbackRequest {
    pub fn new() -> RollbackRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RollbackRequest {
        static mut instance: ::protobuf::lazy::Lazy<RollbackRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackRequest,
        };
        unsafe {
            instance.get(RollbackRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // bytes transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction, ::std::vec::Vec::new())
    }

    pub fn get_transaction(&self) -> &[u8] {
        &self.transaction
    }

    fn get_transaction_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.transaction
    }

    fn mut_transaction_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction
    }
}

impl ::protobuf::Message for RollbackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        if !self.transaction.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.transaction);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        if !self.transaction.is_empty() {
            os.write_bytes(1, &self.transaction)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RollbackRequest {
    fn new() -> RollbackRequest {
        RollbackRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<RollbackRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    RollbackRequest::get_project_id_for_reflect,
                    RollbackRequest::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction",
                    RollbackRequest::get_transaction_for_reflect,
                    RollbackRequest::mut_transaction_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RollbackRequest>(
                    "RollbackRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RollbackRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_transaction();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackResponse {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RollbackResponse {}

impl RollbackResponse {
    pub fn new() -> RollbackResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RollbackResponse {
        static mut instance: ::protobuf::lazy::Lazy<RollbackResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RollbackResponse,
        };
        unsafe {
            instance.get(RollbackResponse::new)
        }
    }
}

impl ::protobuf::Message for RollbackResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RollbackResponse {
    fn new() -> RollbackResponse {
        RollbackResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<RollbackResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RollbackResponse>(
                    "RollbackResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RollbackResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitRequest {
    // message fields
    pub project_id: ::std::string::String,
    pub mode: CommitRequest_Mode,
    mutations: ::protobuf::RepeatedField<Mutation>,
    // message oneof groups
    transaction_selector: ::std::option::Option<CommitRequest_oneof_transaction_selector>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for CommitRequest {}

#[derive(Clone,PartialEq)]
pub enum CommitRequest_oneof_transaction_selector {
    transaction(::std::vec::Vec<u8>),
}

impl CommitRequest {
    pub fn new() -> CommitRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CommitRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommitRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitRequest,
        };
        unsafe {
            instance.get(CommitRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;

    pub fn clear_mode(&mut self) {
        self.mode = CommitRequest_Mode::MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: CommitRequest_Mode) {
        self.mode = v;
    }

    pub fn get_mode(&self) -> CommitRequest_Mode {
        self.mode
    }

    fn get_mode_for_reflect(&self) -> &CommitRequest_Mode {
        &self.mode
    }

    fn mut_mode_for_reflect(&mut self) -> &mut CommitRequest_Mode {
        &mut self.mode
    }

    // bytes transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.transaction_selector = ::std::option::Option::None;
    }

    pub fn has_transaction(&self) -> bool {
        match self.transaction_selector {
            ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_selector = ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(_)) = self.transaction_selector {
        } else {
            self.transaction_selector = ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(::std::vec::Vec::new()));
        }
        match self.transaction_selector {
            ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_transaction() {
            match self.transaction_selector.take() {
                ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_transaction(&self) -> &[u8] {
        match self.transaction_selector {
            ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(ref v)) => v,
            _ => &[],
        }
    }

    // repeated .google.datastore.v1beta3.Mutation mutations = 6;

    pub fn clear_mutations(&mut self) {
        self.mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutations(&mut self, v: ::protobuf::RepeatedField<Mutation>) {
        self.mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutations(&mut self) -> &mut ::protobuf::RepeatedField<Mutation> {
        &mut self.mutations
    }

    // Take field
    pub fn take_mutations(&mut self) -> ::protobuf::RepeatedField<Mutation> {
        ::std::mem::replace(&mut self.mutations, ::protobuf::RepeatedField::new())
    }

    pub fn get_mutations(&self) -> &[Mutation] {
        &self.mutations
    }

    fn get_mutations_for_reflect(&self) -> &::protobuf::RepeatedField<Mutation> {
        &self.mutations
    }

    fn mut_mutations_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Mutation> {
        &mut self.mutations
    }
}

impl ::protobuf::Message for CommitRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.mode = tmp;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.transaction_selector = ::std::option::Option::Some(CommitRequest_oneof_transaction_selector::transaction(is.read_bytes()?));
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mutations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        if self.mode != CommitRequest_Mode::MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.mode);
        };
        for value in &self.mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.transaction_selector {
            match v {
                &CommitRequest_oneof_transaction_selector::transaction(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        if self.mode != CommitRequest_Mode::MODE_UNSPECIFIED {
            os.write_enum(5, self.mode.value())?;
        };
        for v in &self.mutations {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.transaction_selector {
            match v {
                &CommitRequest_oneof_transaction_selector::transaction(ref v) => {
                    os.write_bytes(1, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CommitRequest {
    fn new() -> CommitRequest {
        CommitRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<CommitRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    CommitRequest::get_project_id_for_reflect,
                    CommitRequest::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommitRequest_Mode>>(
                    "mode",
                    CommitRequest::get_mode_for_reflect,
                    CommitRequest::mut_mode_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "transaction",
                    CommitRequest::has_transaction,
                    CommitRequest::get_transaction,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Mutation>>(
                    "mutations",
                    CommitRequest::get_mutations_for_reflect,
                    CommitRequest::mut_mutations_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitRequest>(
                    "CommitRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CommitRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_mode();
        self.clear_transaction();
        self.clear_mutations();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CommitRequest_Mode {
    MODE_UNSPECIFIED = 0,
    TRANSACTIONAL = 1,
    NON_TRANSACTIONAL = 2,
}

impl ::protobuf::ProtobufEnum for CommitRequest_Mode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommitRequest_Mode> {
        match value {
            0 => ::std::option::Option::Some(CommitRequest_Mode::MODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(CommitRequest_Mode::TRANSACTIONAL),
            2 => ::std::option::Option::Some(CommitRequest_Mode::NON_TRANSACTIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommitRequest_Mode] = &[
            CommitRequest_Mode::MODE_UNSPECIFIED,
            CommitRequest_Mode::TRANSACTIONAL,
            CommitRequest_Mode::NON_TRANSACTIONAL,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<CommitRequest_Mode>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CommitRequest_Mode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CommitRequest_Mode {
}

impl ::std::default::Default for CommitRequest_Mode {
    fn default() -> Self {
        CommitRequest_Mode::MODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitRequest_Mode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitResponse {
    // message fields
    mutation_results: ::protobuf::RepeatedField<MutationResult>,
    pub index_updates: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for CommitResponse {}

impl CommitResponse {
    pub fn new() -> CommitResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CommitResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommitResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommitResponse,
        };
        unsafe {
            instance.get(CommitResponse::new)
        }
    }

    // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;

    pub fn clear_mutation_results(&mut self) {
        self.mutation_results.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutation_results(&mut self, v: ::protobuf::RepeatedField<MutationResult>) {
        self.mutation_results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutation_results(&mut self) -> &mut ::protobuf::RepeatedField<MutationResult> {
        &mut self.mutation_results
    }

    // Take field
    pub fn take_mutation_results(&mut self) -> ::protobuf::RepeatedField<MutationResult> {
        ::std::mem::replace(&mut self.mutation_results, ::protobuf::RepeatedField::new())
    }

    pub fn get_mutation_results(&self) -> &[MutationResult] {
        &self.mutation_results
    }

    fn get_mutation_results_for_reflect(&self) -> &::protobuf::RepeatedField<MutationResult> {
        &self.mutation_results
    }

    fn mut_mutation_results_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<MutationResult> {
        &mut self.mutation_results
    }

    // int32 index_updates = 4;

    pub fn clear_index_updates(&mut self) {
        self.index_updates = 0;
    }

    // Param is passed by value, moved
    pub fn set_index_updates(&mut self, v: i32) {
        self.index_updates = v;
    }

    pub fn get_index_updates(&self) -> i32 {
        self.index_updates
    }

    fn get_index_updates_for_reflect(&self) -> &i32 {
        &self.index_updates
    }

    fn mut_index_updates_for_reflect(&mut self) -> &mut i32 {
        &mut self.index_updates
    }
}

impl ::protobuf::Message for CommitResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mutation_results)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.index_updates = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.mutation_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.index_updates != 0 {
            my_size += ::protobuf::rt::value_size(4, self.index_updates, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.mutation_results {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.index_updates != 0 {
            os.write_int32(4, self.index_updates)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CommitResponse {
    fn new() -> CommitResponse {
        CommitResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<CommitResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MutationResult>>(
                    "mutation_results",
                    CommitResponse::get_mutation_results_for_reflect,
                    CommitResponse::mut_mutation_results_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "index_updates",
                    CommitResponse::get_index_updates_for_reflect,
                    CommitResponse::mut_index_updates_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommitResponse>(
                    "CommitResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CommitResponse {
    fn clear(&mut self) {
        self.clear_mutation_results();
        self.clear_index_updates();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllocateIdsRequest {
    // message fields
    pub project_id: ::std::string::String,
    keys: ::protobuf::RepeatedField<super::entity::Key>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for AllocateIdsRequest {}

impl AllocateIdsRequest {
    pub fn new() -> AllocateIdsRequest {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static AllocateIdsRequest {
        static mut instance: ::protobuf::lazy::Lazy<AllocateIdsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AllocateIdsRequest,
        };
        unsafe {
            instance.get(AllocateIdsRequest::new)
        }
    }

    // string project_id = 8;

    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }

    fn get_project_id_for_reflect(&self) -> &::std::string::String {
        &self.project_id
    }

    fn mut_project_id_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // repeated .google.datastore.v1beta3.Key keys = 1;

    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<super::entity::Key>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<super::entity::Key> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    pub fn get_keys(&self) -> &[super::entity::Key] {
        &self.keys
    }

    fn get_keys_for_reflect(&self) -> &::protobuf::RepeatedField<super::entity::Key> {
        &self.keys
    }

    fn mut_keys_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }
}

impl ::protobuf::Message for AllocateIdsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.project_id);
        };
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(8, &self.project_id)?;
        };
        for v in &self.keys {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for AllocateIdsRequest {
    fn new() -> AllocateIdsRequest {
        AllocateIdsRequest::new()
    }

    fn descriptor_static(_: ::std::option::Option<AllocateIdsRequest>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    AllocateIdsRequest::get_project_id_for_reflect,
                    AllocateIdsRequest::mut_project_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Key>>(
                    "keys",
                    AllocateIdsRequest::get_keys_for_reflect,
                    AllocateIdsRequest::mut_keys_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AllocateIdsRequest>(
                    "AllocateIdsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for AllocateIdsRequest {
    fn clear(&mut self) {
        self.clear_project_id();
        self.clear_keys();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllocateIdsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateIdsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllocateIdsResponse {
    // message fields
    keys: ::protobuf::RepeatedField<super::entity::Key>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for AllocateIdsResponse {}

impl AllocateIdsResponse {
    pub fn new() -> AllocateIdsResponse {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static AllocateIdsResponse {
        static mut instance: ::protobuf::lazy::Lazy<AllocateIdsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AllocateIdsResponse,
        };
        unsafe {
            instance.get(AllocateIdsResponse::new)
        }
    }

    // repeated .google.datastore.v1beta3.Key keys = 1;

    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<super::entity::Key>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<super::entity::Key> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    pub fn get_keys(&self) -> &[super::entity::Key] {
        &self.keys
    }

    fn get_keys_for_reflect(&self) -> &::protobuf::RepeatedField<super::entity::Key> {
        &self.keys
    }

    fn mut_keys_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::entity::Key> {
        &mut self.keys
    }
}

impl ::protobuf::Message for AllocateIdsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for AllocateIdsResponse {
    fn new() -> AllocateIdsResponse {
        AllocateIdsResponse::new()
    }

    fn descriptor_static(_: ::std::option::Option<AllocateIdsResponse>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Key>>(
                    "keys",
                    AllocateIdsResponse::get_keys_for_reflect,
                    AllocateIdsResponse::mut_keys_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AllocateIdsResponse>(
                    "AllocateIdsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for AllocateIdsResponse {
    fn clear(&mut self) {
        self.clear_keys();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllocateIdsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateIdsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mutation {
    // message oneof groups
    operation: ::std::option::Option<Mutation_oneof_operation>,
    conflict_detection_strategy: ::std::option::Option<Mutation_oneof_conflict_detection_strategy>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Mutation {}

#[derive(Clone,PartialEq)]
pub enum Mutation_oneof_operation {
    insert(super::entity::Entity),
    update(super::entity::Entity),
    upsert(super::entity::Entity),
    delete(super::entity::Key),
}

#[derive(Clone,PartialEq)]
pub enum Mutation_oneof_conflict_detection_strategy {
    base_version(i64),
}

impl Mutation {
    pub fn new() -> Mutation {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Mutation {
        static mut instance: ::protobuf::lazy::Lazy<Mutation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Mutation,
        };
        unsafe {
            instance.get(Mutation::new)
        }
    }

    // .google.datastore.v1beta3.Entity insert = 4;

    pub fn clear_insert(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: super::entity::Entity) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut super::entity::Entity {
        if let ::std::option::Option::Some(Mutation_oneof_operation::insert(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(super::entity::Entity::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> super::entity::Entity {
        if self.has_insert() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::insert(v)) => v,
                _ => panic!(),
            }
        } else {
            super::entity::Entity::new()
        }
    }

    pub fn get_insert(&self) -> &super::entity::Entity {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(ref v)) => v,
            _ => super::entity::Entity::default_instance(),
        }
    }

    // .google.datastore.v1beta3.Entity update = 5;

    pub fn clear_update(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: super::entity::Entity) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut super::entity::Entity {
        if let ::std::option::Option::Some(Mutation_oneof_operation::update(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(super::entity::Entity::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> super::entity::Entity {
        if self.has_update() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::update(v)) => v,
                _ => panic!(),
            }
        } else {
            super::entity::Entity::new()
        }
    }

    pub fn get_update(&self) -> &super::entity::Entity {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(ref v)) => v,
            _ => super::entity::Entity::default_instance(),
        }
    }

    // .google.datastore.v1beta3.Entity upsert = 6;

    pub fn clear_upsert(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_upsert(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::upsert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_upsert(&mut self, v: super::entity::Entity) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::upsert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_upsert(&mut self) -> &mut super::entity::Entity {
        if let ::std::option::Option::Some(Mutation_oneof_operation::upsert(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::upsert(super::entity::Entity::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::upsert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_upsert(&mut self) -> super::entity::Entity {
        if self.has_upsert() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::upsert(v)) => v,
                _ => panic!(),
            }
        } else {
            super::entity::Entity::new()
        }
    }

    pub fn get_upsert(&self) -> &super::entity::Entity {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::upsert(ref v)) => v,
            _ => super::entity::Entity::default_instance(),
        }
    }

    // .google.datastore.v1beta3.Key delete = 7;

    pub fn clear_delete(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: super::entity::Key) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut super::entity::Key {
        if let ::std::option::Option::Some(Mutation_oneof_operation::delete(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(super::entity::Key::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> super::entity::Key {
        if self.has_delete() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::entity::Key::new()
        }
    }

    pub fn get_delete(&self) -> &super::entity::Key {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(ref v)) => v,
            _ => super::entity::Key::default_instance(),
        }
    }

    // int64 base_version = 8;

    pub fn clear_base_version(&mut self) {
        self.conflict_detection_strategy = ::std::option::Option::None;
    }

    pub fn has_base_version(&self) -> bool {
        match self.conflict_detection_strategy {
            ::std::option::Option::Some(Mutation_oneof_conflict_detection_strategy::base_version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_base_version(&mut self, v: i64) {
        self.conflict_detection_strategy = ::std::option::Option::Some(Mutation_oneof_conflict_detection_strategy::base_version(v))
    }

    pub fn get_base_version(&self) -> i64 {
        match self.conflict_detection_strategy {
            ::std::option::Option::Some(Mutation_oneof_conflict_detection_strategy::base_version(v)) => v,
            _ => 0,
        }
    }
}

impl ::protobuf::Message for Mutation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::upsert(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.conflict_detection_strategy = ::std::option::Option::Some(Mutation_oneof_conflict_detection_strategy::base_version(is.read_int64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Mutation_oneof_operation::insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::upsert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        if let ::std::option::Option::Some(ref v) = self.conflict_detection_strategy {
            match v {
                &Mutation_oneof_conflict_detection_strategy::base_version(v) => {
                    my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Mutation_oneof_operation::insert(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::update(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::upsert(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::delete(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        if let ::std::option::Option::Some(ref v) = self.conflict_detection_strategy {
            match v {
                &Mutation_oneof_conflict_detection_strategy::base_version(v) => {
                    os.write_int64(8, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Mutation {
    fn new() -> Mutation {
        Mutation::new()
    }

    fn descriptor_static(_: ::std::option::Option<Mutation>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::entity::Entity>(
                    "insert",
                    Mutation::has_insert,
                    Mutation::get_insert,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::entity::Entity>(
                    "update",
                    Mutation::has_update,
                    Mutation::get_update,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::entity::Entity>(
                    "upsert",
                    Mutation::has_upsert,
                    Mutation::get_upsert,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::entity::Key>(
                    "delete",
                    Mutation::has_delete,
                    Mutation::get_delete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "base_version",
                    Mutation::has_base_version,
                    Mutation::get_base_version,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Mutation>(
                    "Mutation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Mutation {
    fn clear(&mut self) {
        self.clear_insert();
        self.clear_update();
        self.clear_upsert();
        self.clear_delete();
        self.clear_base_version();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mutation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mutation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MutationResult {
    // message fields
    key: ::protobuf::SingularPtrField<super::entity::Key>,
    pub version: i64,
    pub conflict_detected: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for MutationResult {}

impl MutationResult {
    pub fn new() -> MutationResult {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static MutationResult {
        static mut instance: ::protobuf::lazy::Lazy<MutationResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MutationResult,
        };
        unsafe {
            instance.get(MutationResult::new)
        }
    }

    // .google.datastore.v1beta3.Key key = 3;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: super::entity::Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut super::entity::Key {
        if self.key.is_none() {
            self.key.set_default();
        };
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> super::entity::Key {
        self.key.take().unwrap_or_else(|| super::entity::Key::new())
    }

    pub fn get_key(&self) -> &super::entity::Key {
        self.key.as_ref().unwrap_or_else(|| super::entity::Key::default_instance())
    }

    fn get_key_for_reflect(&self) -> &::protobuf::SingularPtrField<super::entity::Key> {
        &self.key
    }

    fn mut_key_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::entity::Key> {
        &mut self.key
    }

    // int64 version = 4;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    pub fn get_version(&self) -> i64 {
        self.version
    }

    fn get_version_for_reflect(&self) -> &i64 {
        &self.version
    }

    fn mut_version_for_reflect(&mut self) -> &mut i64 {
        &mut self.version
    }

    // bool conflict_detected = 5;

    pub fn clear_conflict_detected(&mut self) {
        self.conflict_detected = false;
    }

    // Param is passed by value, moved
    pub fn set_conflict_detected(&mut self, v: bool) {
        self.conflict_detected = v;
    }

    pub fn get_conflict_detected(&self) -> bool {
        self.conflict_detected
    }

    fn get_conflict_detected_for_reflect(&self) -> &bool {
        &self.conflict_detected
    }

    fn mut_conflict_detected_for_reflect(&mut self) -> &mut bool {
        &mut self.conflict_detected
    }
}

impl ::protobuf::Message for MutationResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.conflict_detected = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.version, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.conflict_detected != false {
            my_size += 2;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.version != 0 {
            os.write_int64(4, self.version)?;
        };
        if self.conflict_detected != false {
            os.write_bool(5, self.conflict_detected)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for MutationResult {
    fn new() -> MutationResult {
        MutationResult::new()
    }

    fn descriptor_static(_: ::std::option::Option<MutationResult>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Key>>(
                    "key",
                    MutationResult::get_key_for_reflect,
                    MutationResult::mut_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "version",
                    MutationResult::get_version_for_reflect,
                    MutationResult::mut_version_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "conflict_detected",
                    MutationResult::get_conflict_detected_for_reflect,
                    MutationResult::mut_conflict_detected_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MutationResult>(
                    "MutationResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for MutationResult {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_version();
        self.clear_conflict_detected();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutationResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutationResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadOptions {
    // message oneof groups
    consistency_type: ::std::option::Option<ReadOptions_oneof_consistency_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ReadOptions {}

#[derive(Clone,PartialEq)]
pub enum ReadOptions_oneof_consistency_type {
    read_consistency(ReadOptions_ReadConsistency),
    transaction(::std::vec::Vec<u8>),
}

impl ReadOptions {
    pub fn new() -> ReadOptions {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ReadOptions {
        static mut instance: ::protobuf::lazy::Lazy<ReadOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadOptions,
        };
        unsafe {
            instance.get(ReadOptions::new)
        }
    }

    // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;

    pub fn clear_read_consistency(&mut self) {
        self.consistency_type = ::std::option::Option::None;
    }

    pub fn has_read_consistency(&self) -> bool {
        match self.consistency_type {
            ::std::option::Option::Some(ReadOptions_oneof_consistency_type::read_consistency(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_consistency(&mut self, v: ReadOptions_ReadConsistency) {
        self.consistency_type = ::std::option::Option::Some(ReadOptions_oneof_consistency_type::read_consistency(v))
    }

    pub fn get_read_consistency(&self) -> ReadOptions_ReadConsistency {
        match self.consistency_type {
            ::std::option::Option::Some(ReadOptions_oneof_consistency_type::read_consistency(v)) => v,
            _ => ReadOptions_ReadConsistency::READ_CONSISTENCY_UNSPECIFIED,
        }
    }

    // bytes transaction = 2;

    pub fn clear_transaction(&mut self) {
        self.consistency_type = ::std::option::Option::None;
    }

    pub fn has_transaction(&self) -> bool {
        match self.consistency_type {
            ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.consistency_type = ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(_)) = self.consistency_type {
        } else {
            self.consistency_type = ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(::std::vec::Vec::new()));
        }
        match self.consistency_type {
            ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_transaction() {
            match self.consistency_type.take() {
                ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_transaction(&self) -> &[u8] {
        match self.consistency_type {
            ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for ReadOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.consistency_type = ::std::option::Option::Some(ReadOptions_oneof_consistency_type::read_consistency(is.read_enum()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.consistency_type = ::std::option::Option::Some(ReadOptions_oneof_consistency_type::transaction(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.consistency_type {
            match v {
                &ReadOptions_oneof_consistency_type::read_consistency(v) => {
                    my_size += ::protobuf::rt::enum_size(1, v);
                },
                &ReadOptions_oneof_consistency_type::transaction(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.consistency_type {
            match v {
                &ReadOptions_oneof_consistency_type::read_consistency(v) => {
                    os.write_enum(1, v.value())?;
                },
                &ReadOptions_oneof_consistency_type::transaction(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ReadOptions {
    fn new() -> ReadOptions {
        ReadOptions::new()
    }

    fn descriptor_static(_: ::std::option::Option<ReadOptions>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, ReadOptions_ReadConsistency>(
                    "read_consistency",
                    ReadOptions::has_read_consistency,
                    ReadOptions::get_read_consistency,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "transaction",
                    ReadOptions::has_transaction,
                    ReadOptions::get_transaction,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadOptions>(
                    "ReadOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ReadOptions {
    fn clear(&mut self) {
        self.clear_read_consistency();
        self.clear_transaction();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReadOptions_ReadConsistency {
    READ_CONSISTENCY_UNSPECIFIED = 0,
    STRONG = 1,
    EVENTUAL = 2,
}

impl ::protobuf::ProtobufEnum for ReadOptions_ReadConsistency {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReadOptions_ReadConsistency> {
        match value {
            0 => ::std::option::Option::Some(ReadOptions_ReadConsistency::READ_CONSISTENCY_UNSPECIFIED),
            1 => ::std::option::Option::Some(ReadOptions_ReadConsistency::STRONG),
            2 => ::std::option::Option::Some(ReadOptions_ReadConsistency::EVENTUAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReadOptions_ReadConsistency] = &[
            ReadOptions_ReadConsistency::READ_CONSISTENCY_UNSPECIFIED,
            ReadOptions_ReadConsistency::STRONG,
            ReadOptions_ReadConsistency::EVENTUAL,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ReadOptions_ReadConsistency>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ReadOptions_ReadConsistency", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ReadOptions_ReadConsistency {
}

impl ::std::default::Default for ReadOptions_ReadConsistency {
    fn default() -> Self {
        ReadOptions_ReadConsistency::READ_CONSISTENCY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadOptions_ReadConsistency {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
    0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x65, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
    0xab, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
    0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
    0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72,
    0x65, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65,
    0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xcb, 0x01,
    0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x12, 0x3c, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x40,
    0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
    0x12, 0x39, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03,
    0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65,
    0x79, 0x52, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x0f,
    0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
    0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
    0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x48,
    0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61,
    0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
    0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x70, 0x61, 0x72,
    0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64,
    0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x51, 0x75, 0x65,
    0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x67,
    0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x47, 0x71, 0x6c, 0x51, 0x75, 0x65,
    0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x67, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c,
    0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a,
    0x10, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x12, 0x40, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x51, 0x75, 0x65, 0x72,
    0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61,
    0x74, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x51, 0x75,
    0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x17, 0x42, 0x65,
    0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x18, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
    0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0d, 0x43,
    0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
    0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
    0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6d,
    0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
    0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
    0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61,
    0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
    0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d,
    0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
    0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
    0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x16, 0x0a, 0x14, 0x74,
    0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
    0x74, 0x6f, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
    0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4d, 0x75, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6d, 0x75, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
    0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
    0x22, 0x66, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x52,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
    0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
    0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
    0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b,
    0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f,
    0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
    0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
    0x79, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
    0x3a, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x75,
    0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
    0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72,
    0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x73,
    0x65, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b,
    0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c,
    0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
    0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d,
    0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x88, 0x01,
    0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
    0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63,
    0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
    0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61,
    0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
    0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x65,
    0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
    0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61,
    0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0b,
    0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x0c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x22, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
    0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
    0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10,
    0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x42,
    0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74,
    0x79, 0x70, 0x65, 0x32, 0xb7, 0x07, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
    0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
    0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
    0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x3a, 0x01,
    0x2a, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65,
    0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
    0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x75,
    0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x42, 0x65,
    0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54,
    0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x42, 0x65, 0x67,
    0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
    0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x62, 0x65,
    0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01,
    0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
    0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
    0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
    0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x3a, 0x01,
    0x2a, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x29,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
    0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
    0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f,
    0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x0b, 0x41, 0x6c,
    0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a,
    0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x61,
    0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x94, 0x01,
    0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x42, 0x0e,
    0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
    0x5a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
    0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
    0x75, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x31, 0x42,
    0x65, 0x74, 0x61, 0x33, 0x4a, 0x9f, 0x63, 0x0a, 0x07, 0x12, 0x05, 0x0e, 0x00, 0xbd, 0x02, 0x01,
    0x0a, 0xbd, 0x04, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x0e, 0x00, 0x12, 0x32, 0xb2, 0x04, 0x20, 0x43,
    0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30, 0x31, 0x36, 0x20, 0x47, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x0a, 0x0a, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x20,
    0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b, 0x0a, 0x20, 0x79, 0x6f, 0x75,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e,
    0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x20, 0x59,
    0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20,
    0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74,
    0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f,
    0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45,
    0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73,
    0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70,
    0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61,
    0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74,
    0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x64,
    0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61,
    0x6e, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c,
    0x0a, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e,
    0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
    0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20,
    0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f,
    0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e,
    0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20,
    0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a,
    0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x75, 0x6e, 0x64,
    0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a,
    0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x20, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00,
    0x12, 0x03, 0x12, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x13, 0x07, 0x2e,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x14, 0x07, 0x2d, 0x0a, 0x08, 0x0a, 0x01, 0x08,
    0x12, 0x03, 0x16, 0x00, 0x3b, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x16,
    0x00, 0x3b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x16, 0x07, 0x17,
    0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x16, 0x07, 0x17, 0x0a,
    0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x16, 0x07, 0x17, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x16, 0x1a, 0x3a, 0x0a, 0x08, 0x0a,
    0x01, 0x08, 0x12, 0x03, 0x17, 0x00, 0x58, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12,
    0x03, 0x17, 0x00, 0x58, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x17,
    0x07, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x17, 0x07,
    0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x17, 0x07,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x17, 0x14, 0x57, 0x0a,
    0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x18, 0x00, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07,
    0x02, 0x12, 0x03, 0x18, 0x00, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x12,
    0x03, 0x18, 0x07, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x12, 0x03,
    0x18, 0x07, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x18, 0x07, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x03, 0x12, 0x03, 0x18, 0x1d,
    0x21, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x19, 0x00, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x08,
    0xe7, 0x07, 0x03, 0x12, 0x03, 0x19, 0x00, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03,
    0x02, 0x12, 0x03, 0x19, 0x07, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00,
    0x12, 0x03, 0x19, 0x07, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x19, 0x07, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03, 0x07, 0x12, 0x03,
    0x19, 0x1e, 0x2e, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1a, 0x00, 0x35, 0x0a, 0x0b, 0x0a,
    0x04, 0x08, 0xe7, 0x07, 0x04, 0x12, 0x03, 0x1a, 0x00, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7,
    0x07, 0x04, 0x02, 0x12, 0x03, 0x1a, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x04,
    0x02, 0x00, 0x12, 0x03, 0x1a, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x04, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x1a, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04, 0x07,
    0x12, 0x03, 0x1a, 0x16, 0x34, 0x0a, 0x95, 0x03, 0x0a, 0x02, 0x06, 0x00, 0x12, 0x04, 0x24, 0x00,
    0x44, 0x01, 0x1a, 0x88, 0x03, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6e,
    0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x74, 0x73, 0x20, 0x69,
    0x6e, 0x70, 0x75, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2c, 0x0a, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
    0x6e, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
    0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x49, 0x44, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
    0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x63,
    0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x6b,
    0x65, 0x79, 0x73, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x61,
    0x6e, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x73,
    0x65, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e,
    0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x66, 0x0a, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x73, 0x65,
    0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x49,
    0x44, 0x20, 0x28, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
    0x79, 0x20, 0x73, 0x65, 0x74, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
    0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x49, 0x44, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x0a, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x06, 0x00, 0x01, 0x12, 0x03, 0x24, 0x08, 0x11, 0x0a, 0x29, 0x0a, 0x04, 0x06, 0x00, 0x02,
    0x00, 0x12, 0x04, 0x26, 0x02, 0x28, 0x03, 0x1a, 0x1b, 0x20, 0x4c, 0x6f, 0x6f, 0x6b, 0x73, 0x20,
    0x75, 0x70, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6b,
    0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x26,
    0x06, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x26, 0x0d, 0x1a,
    0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x26, 0x25, 0x33, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x27, 0x04, 0x5b, 0x0a, 0x0f, 0x0a, 0x08,
    0x06, 0x00, 0x02, 0x00, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x27, 0x04, 0x5b, 0x0a, 0x10, 0x0a,
    0x09, 0x06, 0x00, 0x02, 0x00, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x27, 0x0b, 0x1c, 0x0a,
    0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x00, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x27,
    0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x00, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x27, 0x0c, 0x1b, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x00, 0x04, 0xe7,
    0x07, 0x00, 0x08, 0x12, 0x03, 0x27, 0x1f, 0x5a, 0x0a, 0x25, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01,
    0x12, 0x04, 0x2b, 0x02, 0x2d, 0x03, 0x1a, 0x17, 0x20, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2b, 0x06, 0x0e, 0x0a, 0x0c, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2b, 0x0f, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x06,
    0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x2b, 0x29, 0x39, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x2c, 0x04, 0x5d, 0x0a, 0x0f, 0x0a, 0x08, 0x06, 0x00, 0x02, 0x01, 0x04,
    0xe7, 0x07, 0x00, 0x12, 0x03, 0x2c, 0x04, 0x5d, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01,
    0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x2c, 0x0b, 0x1c, 0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00,
    0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x2c, 0x0b, 0x1c, 0x0a, 0x12, 0x0a,
    0x0b, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2c, 0x0c,
    0x1b, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x08, 0x12, 0x03,
    0x2c, 0x1f, 0x5c, 0x0a, 0x29, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x02, 0x12, 0x04, 0x30, 0x02, 0x32,
    0x03, 0x1a, 0x1b, 0x20, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
    0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x30, 0x06, 0x16, 0x0a, 0x0c, 0x0a, 0x05,
    0x06, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x30, 0x17, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x30, 0x39, 0x51, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02,
    0x04, 0x12, 0x03, 0x31, 0x04, 0x65, 0x0a, 0x0f, 0x0a, 0x08, 0x06, 0x00, 0x02, 0x02, 0x04, 0xe7,
    0x07, 0x00, 0x12, 0x03, 0x31, 0x04, 0x65, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x02, 0x04,
    0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x31, 0x0b, 0x1c, 0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02,
    0x02, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x31, 0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b,
    0x06, 0x00, 0x02, 0x02, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x31, 0x0c, 0x1b,
    0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x02, 0x04, 0xe7, 0x07, 0x00, 0x08, 0x12, 0x03, 0x31,
    0x1f, 0x64, 0x0a, 0x61, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x03, 0x12, 0x04, 0x36, 0x02, 0x38, 0x03,
    0x1a, 0x53, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x64,
    0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66,
    0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x0a, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74,
    0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x36, 0x06, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x36, 0x0d,
    0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x36, 0x25, 0x33, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x37, 0x04, 0x5b, 0x0a, 0x0f, 0x0a,
    0x08, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x37, 0x04, 0x5b, 0x0a, 0x10,
    0x0a, 0x09, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x37, 0x0b, 0x1c,
    0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x37, 0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x03, 0x04, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x37, 0x0c, 0x1b, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x03, 0x04,
    0xe7, 0x07, 0x00, 0x08, 0x12, 0x03, 0x37, 0x1f, 0x5a, 0x0a, 0x29, 0x0a, 0x04, 0x06, 0x00, 0x02,
    0x04, 0x12, 0x04, 0x3b, 0x02, 0x3d, 0x03, 0x1a, 0x1b, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x20,
    0x62, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x3b,
    0x06, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x3b, 0x0f, 0x1e,
    0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x3b, 0x29, 0x39, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x3c, 0x04, 0x5d, 0x0a, 0x0f, 0x0a, 0x08,
    0x06, 0x00, 0x02, 0x04, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x3c, 0x04, 0x5d, 0x0a, 0x10, 0x0a,
    0x09, 0x06, 0x00, 0x02, 0x04, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x3c, 0x0b, 0x1c, 0x0a,
    0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x04, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x3c,
    0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x04, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x3c, 0x0c, 0x1b, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x04, 0x04, 0xe7,
    0x07, 0x00, 0x08, 0x12, 0x03, 0x3c, 0x1f, 0x5c, 0x0a, 0x73, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x05,
    0x12, 0x04, 0x41, 0x02, 0x43, 0x03, 0x1a, 0x65, 0x20, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
    0x65, 0x73, 0x20, 0x49, 0x44, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
    0x69, 0x76, 0x65, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
    0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x79, 0x0a, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x41, 0x06, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x06,
    0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x41, 0x12, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x05, 0x03, 0x12, 0x03, 0x41, 0x2f, 0x42, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x05, 0x04,
    0x12, 0x03, 0x42, 0x04, 0x60, 0x0a, 0x0f, 0x0a, 0x08, 0x06, 0x00, 0x02, 0x05, 0x04, 0xe7, 0x07,
    0x00, 0x12, 0x03, 0x42, 0x04, 0x60, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x05, 0x04, 0xe7,
    0x07, 0x00, 0x02, 0x12, 0x03, 0x42, 0x0b, 0x1c, 0x0a, 0x11, 0x0a, 0x0a, 0x06, 0x00, 0x02, 0x05,
    0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x42, 0x0b, 0x1c, 0x0a, 0x12, 0x0a, 0x0b, 0x06,
    0x00, 0x02, 0x05, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x42, 0x0c, 0x1b, 0x0a,
    0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x05, 0x04, 0xe7, 0x07, 0x00, 0x08, 0x12, 0x03, 0x42, 0x1f,
    0x5f, 0x0a, 0x5c, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x47, 0x00, 0x50, 0x01, 0x1a, 0x50, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
    0x70, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5d, 0x2e, 0x0a, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x47, 0x08, 0x15, 0x0a, 0x47, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x49, 0x02, 0x18, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49,
    0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
    0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0x49,
    0x02, 0x47, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x49, 0x02,
    0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x49, 0x09, 0x13, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x49, 0x16, 0x17, 0x0a, 0x33, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x4c, 0x02, 0x1f, 0x1a, 0x26, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x4c, 0x02, 0x49,
    0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x4c, 0x02, 0x0d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4c, 0x0e, 0x1a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x4c, 0x1d, 0x1e, 0x0a, 0x2b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x4f, 0x02, 0x18, 0x1a, 0x1e, 0x20, 0x4b, 0x65, 0x79, 0x73, 0x20,
    0x6f, 0x66, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c,
    0x6f, 0x6f, 0x6b, 0x20, 0x75, 0x70, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02,
    0x04, 0x12, 0x03, 0x4f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12,
    0x03, 0x4f, 0x0b, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x4f,
    0x0f, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x4f, 0x16, 0x17,
    0x0a, 0x5d, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x53, 0x00, 0x62, 0x01, 0x1a, 0x51, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
    0x70, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5d, 0x2e, 0x0a, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x53, 0x08, 0x16, 0x0a, 0xaa, 0x01, 0x0a, 0x04,
    0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x57, 0x02, 0x22, 0x1a, 0x9c, 0x01, 0x20, 0x45, 0x6e, 0x74,
    0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x20, 0x60,
    0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x55, 0x4c, 0x4c, 0x60,
    0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f,
    0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x57, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x57, 0x0b, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x57,
    0x18, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x57, 0x20, 0x21,
    0x0a, 0xb2, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x5c, 0x02, 0x24, 0x1a, 0xa4,
    0x01, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
    0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x20, 0x60, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
    0x79, 0x70, 0x65, 0x2e, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x60, 0x20, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x0a, 0x20, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75,
    0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73,
    0x20, 0x6e, 0x6f, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6b, 0x65, 0x79, 0x73, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
    0x70, 0x75, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03,
    0x5c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x5c, 0x0b,
    0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5c, 0x18, 0x1f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x5c, 0x22, 0x23, 0x0a, 0xc0, 0x01,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x61, 0x02, 0x1c, 0x1a, 0xb2, 0x01, 0x20, 0x41,
    0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6c, 0x6f, 0x6f, 0x6b,
    0x65, 0x64, 0x20, 0x75, 0x70, 0x20, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73,
    0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
    0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
    0x6e, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x72,
    0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20,
    0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79,
    0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x61, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x61, 0x0b, 0x0e, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x61, 0x0f, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x61, 0x1a, 0x1b, 0x0a, 0x60, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04,
    0x65, 0x00, 0x7a, 0x01, 0x1a, 0x54, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52,
    0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02,
    0x01, 0x12, 0x03, 0x65, 0x08, 0x17, 0x0a, 0x47, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03,
    0x67, 0x02, 0x18, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69,
    0x6e, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0x67, 0x02, 0x65, 0x19, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x67, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x67, 0x09, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x67, 0x16, 0x17, 0x0a, 0xd1, 0x01, 0x0a, 0x04, 0x04, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x6d, 0x02, 0x1f, 0x1a, 0xc3, 0x01, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
    0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x2c,
    0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61,
    0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x0a, 0x20,
    0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x70,
    0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20,
    0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x64, 0x65, 0x66,
    0x61, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x0a, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x04, 0x6d, 0x02, 0x67, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x06, 0x12, 0x03, 0x6d, 0x02, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x6d, 0x0e, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03,
    0x12, 0x03, 0x6d, 0x1d, 0x1e, 0x0a, 0x2a, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x70,
    0x02, 0x1f, 0x1a, 0x1d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x04, 0x70, 0x02, 0x6d, 0x1f,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x70, 0x02, 0x0d, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x70, 0x0e, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x70, 0x1d, 0x1e, 0x0a, 0x22, 0x0a, 0x04, 0x04, 0x02,
    0x08, 0x00, 0x12, 0x04, 0x73, 0x02, 0x79, 0x03, 0x1a, 0x14, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74,
    0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x08, 0x00, 0x01, 0x12, 0x03, 0x73, 0x08, 0x12, 0x0a, 0x20, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x75, 0x04, 0x14, 0x1a, 0x13, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x75, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x06, 0x12, 0x03, 0x75, 0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03, 0x75, 0x0a, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x03, 0x03, 0x12, 0x03, 0x75, 0x12, 0x13, 0x0a, 0x24, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x78, 0x04, 0x1b, 0x1a, 0x17, 0x20, 0x54, 0x68, 0x65, 0x20, 0x47, 0x51, 0x4c, 0x20,
    0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x75, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x04, 0x06, 0x12, 0x03, 0x78, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x04, 0x01, 0x12, 0x03, 0x78, 0x0d, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x04, 0x03, 0x12, 0x03, 0x78, 0x19, 0x1a, 0x0a, 0x62, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x05,
    0x7d, 0x00, 0x83, 0x01, 0x01, 0x1a, 0x55, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x5b, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x03, 0x01, 0x12, 0x03, 0x7d, 0x08, 0x18, 0x0a, 0x39, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00,
    0x12, 0x03, 0x7f, 0x02, 0x1d, 0x1a, 0x2c, 0x20, 0x41, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20,
    0x6f, 0x66, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
    0x20, 0x28, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
    0x29, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x04, 0x7f, 0x02,
    0x7d, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06, 0x12, 0x03, 0x7f, 0x02, 0x12,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x7f, 0x13, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x7f, 0x1b, 0x1c, 0x0a, 0x52, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x01, 0x12, 0x04, 0x82, 0x01, 0x02, 0x12, 0x1a, 0x44, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x60, 0x47, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x60, 0x20, 0x66,
    0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c,
    0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x05, 0x82, 0x01, 0x02, 0x7f, 0x1d,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x04, 0x82, 0x01, 0x02, 0x07, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x04, 0x82, 0x01, 0x08, 0x0d, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x04, 0x82, 0x01, 0x10, 0x11, 0x0a, 0x72, 0x0a,
    0x02, 0x04, 0x04, 0x12, 0x06, 0x86, 0x01, 0x00, 0x89, 0x01, 0x01, 0x1a, 0x64, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72,
    0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
    0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x2e,
    0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x04, 0x86, 0x01, 0x08, 0x1f, 0x0a, 0x48,
    0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x04, 0x88, 0x01, 0x02, 0x18, 0x1a, 0x3a, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f,
    0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00,
    0x04, 0x12, 0x06, 0x88, 0x01, 0x02, 0x86, 0x01, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x00, 0x05, 0x12, 0x04, 0x88, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00,
    0x01, 0x12, 0x04, 0x88, 0x01, 0x09, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03,
    0x12, 0x04, 0x88, 0x01, 0x16, 0x17, 0x0a, 0x73, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x06, 0x8c, 0x01,
    0x00, 0x8f, 0x01, 0x01, 0x1a, 0x65, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61,
    0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x05, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x08, 0x20, 0x0a, 0x3c, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00,
    0x12, 0x04, 0x8e, 0x01, 0x02, 0x18, 0x1a, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
    0x69, 0x65, 0x72, 0x20, 0x28, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x65, 0x73,
    0x65, 0x6e, 0x74, 0x29, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12,
    0x06, 0x8e, 0x01, 0x02, 0x8c, 0x01, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05,
    0x12, 0x04, 0x8e, 0x01, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12,
    0x04, 0x8e, 0x01, 0x08, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x04,
    0x8e, 0x01, 0x16, 0x17, 0x0a, 0x62, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x06, 0x92, 0x01, 0x00, 0x99,
    0x01, 0x01, 0x1a, 0x54, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
    0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
    0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5d, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x06, 0x01, 0x12,
    0x04, 0x92, 0x01, 0x08, 0x17, 0x0a, 0x48, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x00, 0x12, 0x04, 0x94,
    0x01, 0x02, 0x18, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69,
    0x6e, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a,
    0x0f, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12, 0x06, 0x94, 0x01, 0x02, 0x92, 0x01, 0x19,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x05, 0x12, 0x04, 0x94, 0x01, 0x02, 0x08, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x04, 0x94, 0x01, 0x09, 0x13, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x04, 0x94, 0x01, 0x16, 0x17, 0x0a, 0x96, 0x01,
    0x0a, 0x04, 0x04, 0x06, 0x02, 0x01, 0x12, 0x04, 0x98, 0x01, 0x02, 0x18, 0x1a, 0x87, 0x01, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75,
    0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
    0x6f, 0x0a, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
    0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5b,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x5d, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x04, 0x12,
    0x06, 0x98, 0x01, 0x02, 0x94, 0x01, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x05,
    0x12, 0x04, 0x98, 0x01, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x01, 0x12,
    0x04, 0x98, 0x01, 0x08, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12, 0x04,
    0x98, 0x01, 0x16, 0x17, 0x0a, 0x78, 0x0a, 0x02, 0x04, 0x07, 0x12, 0x06, 0x9d, 0x01, 0x00, 0x9f,
    0x01, 0x01, 0x1a, 0x6a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f,
    0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5d, 0x2e, 0x0a, 0x20, 0x28, 0x61, 0x6e, 0x20, 0x65, 0x6d,
    0x70, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0b,
    0x0a, 0x03, 0x04, 0x07, 0x01, 0x12, 0x04, 0x9d, 0x01, 0x08, 0x18, 0x0a, 0x5e, 0x0a, 0x02, 0x04,
    0x08, 0x12, 0x06, 0xa2, 0x01, 0x00, 0xcc, 0x01, 0x01, 0x1a, 0x50, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5d, 0x5b, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5d, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x08, 0x01, 0x12, 0x04, 0xa2, 0x01, 0x08, 0x15, 0x0a, 0x32, 0x0a, 0x04, 0x04, 0x08, 0x04, 0x00,
    0x12, 0x06, 0xa4, 0x01, 0x02, 0xae, 0x01, 0x03, 0x1a, 0x22, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d,
    0x6f, 0x64, 0x65, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x08, 0x04, 0x00, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x07, 0x0b, 0x0a, 0x3b, 0x0a, 0x06, 0x04,
    0x08, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0xa6, 0x01, 0x04, 0x19, 0x1a, 0x2b, 0x20, 0x55, 0x6e,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
    0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x04, 0xa6, 0x01, 0x04, 0x14, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0xa6, 0x01, 0x17, 0x18, 0x0a, 0xbd, 0x01, 0x0a, 0x06, 0x04,
    0x08, 0x04, 0x00, 0x02, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x04, 0x16, 0x1a, 0xac, 0x01, 0x20, 0x54,
    0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
    0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
    0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x20,
    0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x20, 0x5b, 0x68, 0x65, 0x72, 0x65, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
    0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
    0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63,
    0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x04, 0x11, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x08, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0xaa, 0x01, 0x14, 0x15, 0x0a, 0x50, 0x0a, 0x06,
    0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x12, 0x04, 0xad, 0x01, 0x04, 0x1a, 0x1a, 0x40, 0x20, 0x4e,
    0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
    0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
    0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x73,
    0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x0a, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0xad, 0x01, 0x04, 0x15, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0xad, 0x01, 0x18, 0x19,
    0x0a, 0x48, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x00, 0x12, 0x04, 0xb1, 0x01, 0x02, 0x18, 0x1a, 0x3a,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
    0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x77,
    0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x00, 0x04, 0x12, 0x06, 0xb1, 0x01, 0x02, 0xae, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x08, 0x02, 0x00, 0x05, 0x12, 0x04, 0xb1, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08,
    0x02, 0x00, 0x01, 0x12, 0x04, 0xb1, 0x01, 0x09, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02,
    0x00, 0x03, 0x12, 0x04, 0xb1, 0x01, 0x16, 0x17, 0x0a, 0x4b, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x01,
    0x12, 0x04, 0xb4, 0x01, 0x02, 0x10, 0x1a, 0x3d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
    0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70,
    0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x60, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x41, 0x4c, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x04, 0x12, 0x06,
    0xb4, 0x01, 0x02, 0xb1, 0x01, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x06, 0x12,
    0x04, 0xb4, 0x01, 0x02, 0x06, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x01, 0x12, 0x04,
    0xb4, 0x01, 0x07, 0x0b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x03, 0x12, 0x04, 0xb4,
    0x01, 0x0e, 0x0f, 0x0a, 0x3b, 0x0a, 0x04, 0x04, 0x08, 0x08, 0x00, 0x12, 0x06, 0xb7, 0x01, 0x02,
    0xbc, 0x01, 0x03, 0x1a, 0x2b, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65,
    0x74, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x60,
    0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x60, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x08, 0x00, 0x01, 0x12, 0x04, 0xb7, 0x01, 0x08, 0x1c, 0x0a,
    0xd5, 0x01, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x02, 0x12, 0x04, 0xbb, 0x01, 0x04, 0x1a, 0x1a, 0xc6,
    0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x20,
    0x41, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
    0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74,
    0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20,
    0x74, 0x6f, 0x0a, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42,
    0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d,
    0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x05,
    0x12, 0x04, 0xbb, 0x01, 0x04, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x01, 0x12,
    0x04, 0xbb, 0x01, 0x0a, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x03, 0x12, 0x04,
    0xbb, 0x01, 0x18, 0x19, 0x0a, 0xcc, 0x03, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x03, 0x12, 0x04, 0xcb,
    0x01, 0x02, 0x22, 0x1a, 0xbd, 0x03, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
    0x0a, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x60, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x60, 0x2c,
    0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63,
    0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
    0x64, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
    0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
    0x67, 0x6c, 0x65, 0x0a, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e,
    0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x60, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
    0x74, 0x60, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x0a, 0x0a, 0x20, 0x2d, 0x20,
    0x60, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
    0x64, 0x20, 0x62, 0x79, 0x20, 0x60, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x0a, 0x20, 0x2d,
    0x20, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x60, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
    0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x60, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x0a, 0x20,
    0x2d, 0x20, 0x60, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x60, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
    0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x60, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x0a,
    0x20, 0x2d, 0x20, 0x60, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x60, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
    0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x60,
    0x0a, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x60, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x41, 0x4c, 0x60, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6d, 0x75, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
    0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x0a, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03, 0x04, 0x12, 0x04, 0xcb, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03, 0x06, 0x12, 0x04, 0xcb, 0x01, 0x0b,
    0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03, 0x01, 0x12, 0x04, 0xcb, 0x01, 0x14, 0x1d,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x03, 0x03, 0x12, 0x04, 0xcb, 0x01, 0x20, 0x21, 0x0a,
    0x5f, 0x0a, 0x02, 0x04, 0x09, 0x12, 0x06, 0xcf, 0x01, 0x00, 0xd7, 0x01, 0x01, 0x1a, 0x51, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
    0x69, 0x74, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5d, 0x2e, 0x0a,
    0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x09, 0x01, 0x12, 0x04, 0xcf, 0x01, 0x08, 0x16, 0x0a, 0x82, 0x01,
    0x0a, 0x04, 0x04, 0x09, 0x02, 0x00, 0x12, 0x04, 0xd2, 0x01, 0x02, 0x2f, 0x1a, 0x74, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x72,
    0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x2d, 0x74, 0x68,
    0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x69, 0x2d, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x04, 0x12, 0x04, 0xd2, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x06, 0x12, 0x04, 0xd2, 0x01, 0x0b, 0x19,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x01, 0x12, 0x04, 0xd2, 0x01, 0x1a, 0x2a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x03, 0x12, 0x04, 0xd2, 0x01, 0x2d, 0x2e, 0x0a, 0x65,
    0x0a, 0x04, 0x04, 0x09, 0x02, 0x01, 0x12, 0x04, 0xd6, 0x01, 0x02, 0x1a, 0x1a, 0x57, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x64,
    0x65, 0x78, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
    0x6d, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x69, 0x66,
    0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x77, 0x65, 0x72, 0x65, 0x0a, 0x20, 0x75, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x04, 0x12, 0x06,
    0xd6, 0x01, 0x02, 0xd2, 0x01, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x05, 0x12,
    0x04, 0xd6, 0x01, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x01, 0x12, 0x04,
    0xd6, 0x01, 0x08, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x03, 0x12, 0x04, 0xd6,
    0x01, 0x18, 0x19, 0x0a, 0x68, 0x0a, 0x02, 0x04, 0x0a, 0x12, 0x06, 0xda, 0x01, 0x00, 0xe1, 0x01,
    0x01, 0x1a, 0x5a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
    0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
    0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x5d, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a,
    0x03, 0x04, 0x0a, 0x01, 0x12, 0x04, 0xda, 0x01, 0x08, 0x1a, 0x0a, 0x48, 0x0a, 0x04, 0x04, 0x0a,
    0x02, 0x00, 0x12, 0x04, 0xdc, 0x01, 0x02, 0x18, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49,
    0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
    0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x04, 0x12, 0x06, 0xdc,
    0x01, 0x02, 0xda, 0x01, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x05, 0x12, 0x04,
    0xdc, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x01, 0x12, 0x04, 0xdc,
    0x01, 0x09, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x03, 0x12, 0x04, 0xdc, 0x01,
    0x16, 0x17, 0x0a, 0x76, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x01, 0x12, 0x04, 0xe0, 0x01, 0x02, 0x18,
    0x1a, 0x68, 0x20, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6b, 0x65, 0x79,
    0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
    0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
    0x65, 0x20, 0x49, 0x44, 0x73, 0x2e, 0x0a, 0x20, 0x4e, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72,
    0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a,
    0x02, 0x01, 0x04, 0x12, 0x04, 0xe0, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02,
    0x01, 0x06, 0x12, 0x04, 0xe0, 0x01, 0x0b, 0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01,
    0x01, 0x12, 0x04, 0xe0, 0x01, 0x0f, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x03,
    0x12, 0x04, 0xe0, 0x01, 0x16, 0x17, 0x0a, 0x69, 0x0a, 0x02, 0x04, 0x0b, 0x12, 0x06, 0xe4, 0x01,
    0x00, 0xe8, 0x01, 0x01, 0x1a, 0x5b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x5d, 0x5b,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x5d, 0x2e,
    0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0b, 0x01, 0x12, 0x04, 0xe4, 0x01, 0x08, 0x1b, 0x0a, 0x83,
    0x01, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x00, 0x12, 0x04, 0xe7, 0x01, 0x02, 0x18, 0x1a, 0x75, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
    0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6f,
    0x72, 0x64, 0x65, 0x72, 0x29, 0x2c, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x0a, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x63,
    0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20,
    0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
    0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x04, 0x12, 0x04, 0xe7,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x06, 0x12, 0x04, 0xe7, 0x01,
    0x0b, 0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x01, 0x12, 0x04, 0xe7, 0x01, 0x0f,
    0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x03, 0x12, 0x04, 0xe7, 0x01, 0x16, 0x17,
    0x0a, 0x31, 0x0a, 0x02, 0x04, 0x0c, 0x12, 0x06, 0xeb, 0x01, 0x00, 0x8e, 0x02, 0x01, 0x1a, 0x23,
    0x20, 0x41, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61,
    0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0c, 0x01, 0x12, 0x04, 0xeb, 0x01, 0x08, 0x10,
    0x0a, 0xcf, 0x02, 0x0a, 0x04, 0x04, 0x0c, 0x08, 0x00, 0x12, 0x06, 0xf4, 0x01, 0x02, 0x84, 0x02,
    0x03, 0x1a, 0xbe, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x20, 0x46,
    0x6f, 0x72, 0x20, 0x60, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x60, 0x2c, 0x20, 0x60, 0x75, 0x70,
    0x64, 0x61, 0x74, 0x65, 0x60, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x60, 0x75, 0x70, 0x73, 0x65,
    0x72, 0x74, 0x60, 0x3a, 0x0a, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x27, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72, 0x65,
    0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x20, 0x70,
    0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61,
    0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x0a,
    0x20, 0x20, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a,
    0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61,
    0x76, 0x65, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x31, 0x38, 0x2c, 0x0a, 0x20,
    0x20, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
    0x69, 0x6e, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x08, 0x00, 0x01, 0x12, 0x04, 0xf4, 0x01, 0x08,
    0x11, 0x0a, 0x80, 0x01, 0x0a, 0x04, 0x04, 0x0c, 0x02, 0x00, 0x12, 0x04, 0xf7, 0x01, 0x04, 0x16,
    0x1a, 0x72, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f,
    0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x72,
    0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x27, 0x73, 0x20, 0x66, 0x69,
    0x6e, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
    0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x06, 0x12, 0x04, 0xf7,
    0x01, 0x04, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x01, 0x12, 0x04, 0xf7, 0x01,
    0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x00, 0x03, 0x12, 0x04, 0xf7, 0x01, 0x14,
    0x15, 0x0a, 0x64, 0x0a, 0x04, 0x04, 0x0c, 0x02, 0x01, 0x12, 0x04, 0xfb, 0x01, 0x04, 0x16, 0x1a,
    0x56, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20,
    0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20,
    0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x0a, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79,
    0x20, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x01, 0x06,
    0x12, 0x04, 0xfb, 0x01, 0x04, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x01, 0x01, 0x12,
    0x04, 0xfb, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x01, 0x03, 0x12, 0x04,
    0xfb, 0x01, 0x14, 0x15, 0x0a, 0x86, 0x01, 0x0a, 0x04, 0x04, 0x0c, 0x02, 0x02, 0x12, 0x04, 0xff,
    0x01, 0x04, 0x16, 0x1a, 0x78, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61,
    0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78,
    0x69, 0x73, 0x74, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x20, 0x6b, 0x65, 0x79, 0x27, 0x73, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x74,
    0x68, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65,
    0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0c, 0x02, 0x02, 0x06, 0x12, 0x04, 0xff, 0x01, 0x04, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0c, 0x02, 0x02, 0x01, 0x12, 0x04, 0xff, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0c, 0x02, 0x02, 0x03, 0x12, 0x04, 0xff, 0x01, 0x14, 0x15, 0x0a, 0x9d, 0x01, 0x0a, 0x04, 0x04,
    0x0c, 0x02, 0x03, 0x12, 0x04, 0x83, 0x02, 0x04, 0x13, 0x1a, 0x8e, 0x01, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x6b, 0x65, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x72, 0x20,
    0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20,
    0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x0a, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76,
    0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79,
    0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2f, 0x72,
    0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c,
    0x02, 0x03, 0x06, 0x12, 0x04, 0x83, 0x02, 0x04, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02,
    0x03, 0x01, 0x12, 0x04, 0x83, 0x02, 0x08, 0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x03,
    0x03, 0x12, 0x04, 0x83, 0x02, 0x11, 0x12, 0x0a, 0xe3, 0x01, 0x0a, 0x04, 0x04, 0x0c, 0x08, 0x01,
    0x12, 0x06, 0x89, 0x02, 0x02, 0x8d, 0x02, 0x03, 0x1a, 0xd2, 0x01, 0x20, 0x57, 0x68, 0x65, 0x6e,
    0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x20, 0x77, 0x68, 0x65,
    0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
    0x63, 0x74, 0x73, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
    0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
    0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x0a, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
    0x64, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65,
    0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x20, 0x4d, 0x75, 0x74,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0c, 0x08, 0x01, 0x01, 0x12, 0x04, 0x89, 0x02, 0x08, 0x23, 0x0a, 0xa5, 0x01, 0x0a,
    0x04, 0x04, 0x0c, 0x02, 0x04, 0x12, 0x04, 0x8c, 0x02, 0x04, 0x1b, 0x1a, 0x96, 0x01, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x62,
    0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e,
    0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72,
    0x72, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
    0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x04, 0x05, 0x12, 0x04, 0x8c,
    0x02, 0x04, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x04, 0x01, 0x12, 0x04, 0x8c, 0x02,
    0x0a, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02, 0x04, 0x03, 0x12, 0x04, 0x8c, 0x02, 0x19,
    0x1a, 0x0a, 0x32, 0x0a, 0x02, 0x04, 0x0d, 0x12, 0x06, 0x91, 0x02, 0x00, 0xa0, 0x02, 0x01, 0x1a,
    0x24, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0d, 0x01, 0x12, 0x04, 0x91, 0x02,
    0x08, 0x16, 0x0a, 0x5d, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x00, 0x12, 0x04, 0x94, 0x02, 0x02, 0x0e,
    0x1a, 0x4f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
    0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6b,
    0x65, 0x79, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2e,
    0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x04, 0x12, 0x06, 0x94, 0x02, 0x02, 0x91,
    0x02, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x06, 0x12, 0x04, 0x94, 0x02, 0x02,
    0x05, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x01, 0x12, 0x04, 0x94, 0x02, 0x06, 0x09,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x03, 0x12, 0x04, 0x94, 0x02, 0x0c, 0x0d, 0x0a,
    0xee, 0x02, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x01, 0x12, 0x04, 0x9b, 0x02, 0x02, 0x14, 0x1a, 0xdf,
    0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
    0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
    0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x0a, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27,
    0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e,
    0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c,
    0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x0a, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
    0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x72, 0x2c,
    0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73,
    0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x73,
    0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x72,
    0x69, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x66, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x0a, 0x20,
    0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
    0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
    0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x04, 0x12, 0x06, 0x9b, 0x02, 0x02, 0x94, 0x02,
    0x0e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x05, 0x12, 0x04, 0x9b, 0x02, 0x02, 0x07,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x01, 0x12, 0x04, 0x9b, 0x02, 0x08, 0x0f, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x01, 0x03, 0x12, 0x04, 0x9b, 0x02, 0x12, 0x13, 0x0a, 0x96,
    0x01, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x02, 0x12, 0x04, 0x9f, 0x02, 0x02, 0x1d, 0x1a, 0x87, 0x01,
    0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
    0x69, 0x63, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x20, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
    0x74, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x61,
    0x74, 0x65, 0x67, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x04,
    0x12, 0x06, 0x9f, 0x02, 0x02, 0x9b, 0x02, 0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02,
    0x05, 0x12, 0x04, 0x9f, 0x02, 0x02, 0x06, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x01,
    0x12, 0x04, 0x9f, 0x02, 0x07, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x02, 0x03, 0x12,
    0x04, 0x9f, 0x02, 0x1b, 0x1c, 0x0a, 0x34, 0x0a, 0x02, 0x04, 0x0e, 0x12, 0x06, 0xa3, 0x02, 0x00,
    0xbd, 0x02, 0x01, 0x1a, 0x26, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x61, 0x64,
    0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x0e, 0x01, 0x12, 0x04, 0xa3, 0x02, 0x08, 0x13, 0x0a, 0x3d, 0x0a, 0x04, 0x04, 0x0e, 0x04, 0x00,
    0x12, 0x06, 0xa5, 0x02, 0x02, 0xae, 0x02, 0x03, 0x1a, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70,
    0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
    0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x04, 0x00, 0x01,
    0x12, 0x04, 0xa5, 0x02, 0x07, 0x16, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x00,
    0x12, 0x04, 0xa7, 0x02, 0x04, 0x25, 0x1a, 0x2b, 0x20, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
    0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04,
    0xa7, 0x02, 0x04, 0x20, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x04, 0xa7, 0x02, 0x23, 0x24, 0x0a, 0x25, 0x0a, 0x06, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x04, 0xaa, 0x02, 0x04, 0x0f, 0x1a, 0x15, 0x20, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x63,
    0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x0e, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0xaa, 0x02, 0x04, 0x0a, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0xaa, 0x02, 0x0d, 0x0e, 0x0a, 0x27,
    0x0a, 0x06, 0x04, 0x0e, 0x04, 0x00, 0x02, 0x02, 0x12, 0x04, 0xad, 0x02, 0x04, 0x11, 0x1a, 0x17,
    0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
    0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0e, 0x04, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x04, 0xad, 0x02, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0e, 0x04, 0x00,
    0x02, 0x02, 0x02, 0x12, 0x04, 0xad, 0x02, 0x0f, 0x10, 0x0a, 0xa4, 0x01, 0x0a, 0x04, 0x04, 0x0e,
    0x08, 0x00, 0x12, 0x06, 0xb3, 0x02, 0x02, 0xbc, 0x02, 0x03, 0x1a, 0x93, 0x01, 0x20, 0x49, 0x66,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20,
    0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x63, 0x65,
    0x73, 0x74, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x64, 0x65, 0x66,
    0x61, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x60, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
    0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x60, 0x3d, 0x60, 0x53, 0x54, 0x52,
    0x4f, 0x4e, 0x47, 0x60, 0x2c, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x71, 0x75, 0x65,
    0x72, 0x69, 0x65, 0x73, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x0a,
    0x20, 0x60, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
    0x63, 0x79, 0x60, 0x3d, 0x60, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x41, 0x4c, 0x60, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x08, 0x00, 0x01, 0x12, 0x04, 0xb3, 0x02, 0x08, 0x18, 0x0a,
    0x6d, 0x0a, 0x04, 0x04, 0x0e, 0x02, 0x00, 0x12, 0x04, 0xb6, 0x02, 0x04, 0x29, 0x1a, 0x5f, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x2e, 0x0a, 0x20,
    0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f,
    0x20, 0x60, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x60, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x6c,
    0x6f, 0x62, 0x61, 0x6c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0e, 0x02, 0x00, 0x06, 0x12, 0x04, 0xb6, 0x02, 0x04, 0x13, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0e, 0x02, 0x00, 0x01, 0x12, 0x04, 0xb6, 0x02, 0x14, 0x24, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0e, 0x02, 0x00, 0x03, 0x12, 0x04, 0xb6, 0x02, 0x27, 0x28, 0x0a, 0xcb, 0x01, 0x0a, 0x04,
    0x04, 0x0e, 0x02, 0x01, 0x12, 0x04, 0xbb, 0x02, 0x04, 0x1a, 0x1a, 0xbc, 0x01, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x64,
    0x2e, 0x20, 0x41, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72,
    0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c,
    0x6c, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x5b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02,
    0x01, 0x05, 0x12, 0x04, 0xbb, 0x02, 0x04, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01,
    0x01, 0x12, 0x04, 0xbb, 0x02, 0x0a, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0e, 0x02, 0x01, 0x03,
    0x12, 0x04, 0xbb, 0x02, 0x18, 0x19, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
