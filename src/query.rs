// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct EntityResult {
    // message fields
    entity: ::protobuf::SingularPtrField<super::entity::Entity>,
    pub version: i64,
    pub cursor: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for EntityResult {}

impl EntityResult {
    pub fn new() -> EntityResult {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static EntityResult {
        static mut instance: ::protobuf::lazy::Lazy<EntityResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntityResult,
        };
        unsafe {
            instance.get(EntityResult::new)
        }
    }

    // .google.datastore.v1beta3.Entity entity = 1;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    pub fn has_entity(&self) -> bool {
        self.entity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: super::entity::Entity) {
        self.entity = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut super::entity::Entity {
        if self.entity.is_none() {
            self.entity.set_default();
        };
        self.entity.as_mut().unwrap()
    }

    // Take field
    pub fn take_entity(&mut self) -> super::entity::Entity {
        self.entity.take().unwrap_or_else(|| super::entity::Entity::new())
    }

    pub fn get_entity(&self) -> &super::entity::Entity {
        self.entity.as_ref().unwrap_or_else(|| super::entity::Entity::default_instance())
    }

    fn get_entity_for_reflect(&self) -> &::protobuf::SingularPtrField<super::entity::Entity> {
        &self.entity
    }

    fn mut_entity_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::entity::Entity> {
        &mut self.entity
    }

    // int64 version = 4;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    pub fn get_version(&self) -> i64 {
        self.version
    }

    fn get_version_for_reflect(&self) -> &i64 {
        &self.version
    }

    fn mut_version_for_reflect(&mut self) -> &mut i64 {
        &mut self.version
    }

    // bytes cursor = 3;

    pub fn clear_cursor(&mut self) {
        self.cursor.clear();
    }

    // Param is passed by value, moved
    pub fn set_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.cursor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cursor
    }

    // Take field
    pub fn take_cursor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cursor, ::std::vec::Vec::new())
    }

    pub fn get_cursor(&self) -> &[u8] {
        &self.cursor
    }

    fn get_cursor_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.cursor
    }

    fn mut_cursor_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cursor
    }
}

impl ::protobuf::Message for EntityResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entity)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cursor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.version, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.cursor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.cursor);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.entity.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.version != 0 {
            os.write_int64(4, self.version)?;
        };
        if !self.cursor.is_empty() {
            os.write_bytes(3, &self.cursor)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for EntityResult {
    fn new() -> EntityResult {
        EntityResult::new()
    }

    fn descriptor_static(_: ::std::option::Option<EntityResult>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Entity>>(
                    "entity",
                    EntityResult::get_entity_for_reflect,
                    EntityResult::mut_entity_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "version",
                    EntityResult::get_version_for_reflect,
                    EntityResult::mut_version_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cursor",
                    EntityResult::get_cursor_for_reflect,
                    EntityResult::mut_cursor_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntityResult>(
                    "EntityResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for EntityResult {
    fn clear(&mut self) {
        self.clear_entity();
        self.clear_version();
        self.clear_cursor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntityResult_ResultType {
    RESULT_TYPE_UNSPECIFIED = 0,
    FULL = 1,
    PROJECTION = 2,
    KEY_ONLY = 3,
}

impl ::protobuf::ProtobufEnum for EntityResult_ResultType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntityResult_ResultType> {
        match value {
            0 => ::std::option::Option::Some(EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(EntityResult_ResultType::FULL),
            2 => ::std::option::Option::Some(EntityResult_ResultType::PROJECTION),
            3 => ::std::option::Option::Some(EntityResult_ResultType::KEY_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntityResult_ResultType] = &[
            EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED,
            EntityResult_ResultType::FULL,
            EntityResult_ResultType::PROJECTION,
            EntityResult_ResultType::KEY_ONLY,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<EntityResult_ResultType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EntityResult_ResultType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EntityResult_ResultType {
}

impl ::std::default::Default for EntityResult_ResultType {
    fn default() -> Self {
        EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityResult_ResultType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query {
    // message fields
    projection: ::protobuf::RepeatedField<Projection>,
    kind: ::protobuf::RepeatedField<KindExpression>,
    filter: ::protobuf::SingularPtrField<Filter>,
    order: ::protobuf::RepeatedField<PropertyOrder>,
    distinct_on: ::protobuf::RepeatedField<PropertyReference>,
    pub start_cursor: ::std::vec::Vec<u8>,
    pub end_cursor: ::std::vec::Vec<u8>,
    pub offset: i32,
    limit: ::protobuf::SingularPtrField<super::wrappers::Int32Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Query {}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Query {
        static mut instance: ::protobuf::lazy::Lazy<Query> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query,
        };
        unsafe {
            instance.get(Query::new)
        }
    }

    // repeated .google.datastore.v1beta3.Projection projection = 2;

    pub fn clear_projection(&mut self) {
        self.projection.clear();
    }

    // Param is passed by value, moved
    pub fn set_projection(&mut self, v: ::protobuf::RepeatedField<Projection>) {
        self.projection = v;
    }

    // Mutable pointer to the field.
    pub fn mut_projection(&mut self) -> &mut ::protobuf::RepeatedField<Projection> {
        &mut self.projection
    }

    // Take field
    pub fn take_projection(&mut self) -> ::protobuf::RepeatedField<Projection> {
        ::std::mem::replace(&mut self.projection, ::protobuf::RepeatedField::new())
    }

    pub fn get_projection(&self) -> &[Projection] {
        &self.projection
    }

    fn get_projection_for_reflect(&self) -> &::protobuf::RepeatedField<Projection> {
        &self.projection
    }

    fn mut_projection_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Projection> {
        &mut self.projection
    }

    // repeated .google.datastore.v1beta3.KindExpression kind = 3;

    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::protobuf::RepeatedField<KindExpression>) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    pub fn mut_kind(&mut self) -> &mut ::protobuf::RepeatedField<KindExpression> {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::protobuf::RepeatedField<KindExpression> {
        ::std::mem::replace(&mut self.kind, ::protobuf::RepeatedField::new())
    }

    pub fn get_kind(&self) -> &[KindExpression] {
        &self.kind
    }

    fn get_kind_for_reflect(&self) -> &::protobuf::RepeatedField<KindExpression> {
        &self.kind
    }

    fn mut_kind_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<KindExpression> {
        &mut self.kind
    }

    // .google.datastore.v1beta3.Filter filter = 4;

    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: Filter) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut Filter {
        if self.filter.is_none() {
            self.filter.set_default();
        };
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> Filter {
        self.filter.take().unwrap_or_else(|| Filter::new())
    }

    pub fn get_filter(&self) -> &Filter {
        self.filter.as_ref().unwrap_or_else(|| Filter::default_instance())
    }

    fn get_filter_for_reflect(&self) -> &::protobuf::SingularPtrField<Filter> {
        &self.filter
    }

    fn mut_filter_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<Filter> {
        &mut self.filter
    }

    // repeated .google.datastore.v1beta3.PropertyOrder order = 5;

    pub fn clear_order(&mut self) {
        self.order.clear();
    }

    // Param is passed by value, moved
    pub fn set_order(&mut self, v: ::protobuf::RepeatedField<PropertyOrder>) {
        self.order = v;
    }

    // Mutable pointer to the field.
    pub fn mut_order(&mut self) -> &mut ::protobuf::RepeatedField<PropertyOrder> {
        &mut self.order
    }

    // Take field
    pub fn take_order(&mut self) -> ::protobuf::RepeatedField<PropertyOrder> {
        ::std::mem::replace(&mut self.order, ::protobuf::RepeatedField::new())
    }

    pub fn get_order(&self) -> &[PropertyOrder] {
        &self.order
    }

    fn get_order_for_reflect(&self) -> &::protobuf::RepeatedField<PropertyOrder> {
        &self.order
    }

    fn mut_order_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<PropertyOrder> {
        &mut self.order
    }

    // repeated .google.datastore.v1beta3.PropertyReference distinct_on = 6;

    pub fn clear_distinct_on(&mut self) {
        self.distinct_on.clear();
    }

    // Param is passed by value, moved
    pub fn set_distinct_on(&mut self, v: ::protobuf::RepeatedField<PropertyReference>) {
        self.distinct_on = v;
    }

    // Mutable pointer to the field.
    pub fn mut_distinct_on(&mut self) -> &mut ::protobuf::RepeatedField<PropertyReference> {
        &mut self.distinct_on
    }

    // Take field
    pub fn take_distinct_on(&mut self) -> ::protobuf::RepeatedField<PropertyReference> {
        ::std::mem::replace(&mut self.distinct_on, ::protobuf::RepeatedField::new())
    }

    pub fn get_distinct_on(&self) -> &[PropertyReference] {
        &self.distinct_on
    }

    fn get_distinct_on_for_reflect(&self) -> &::protobuf::RepeatedField<PropertyReference> {
        &self.distinct_on
    }

    fn mut_distinct_on_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<PropertyReference> {
        &mut self.distinct_on
    }

    // bytes start_cursor = 7;

    pub fn clear_start_cursor(&mut self) {
        self.start_cursor.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_cursor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_cursor
    }

    // Take field
    pub fn take_start_cursor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_cursor, ::std::vec::Vec::new())
    }

    pub fn get_start_cursor(&self) -> &[u8] {
        &self.start_cursor
    }

    fn get_start_cursor_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.start_cursor
    }

    fn mut_start_cursor_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_cursor
    }

    // bytes end_cursor = 8;

    pub fn clear_end_cursor(&mut self) {
        self.end_cursor.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_cursor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_cursor
    }

    // Take field
    pub fn take_end_cursor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_cursor, ::std::vec::Vec::new())
    }

    pub fn get_end_cursor(&self) -> &[u8] {
        &self.end_cursor
    }

    fn get_end_cursor_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.end_cursor
    }

    fn mut_end_cursor_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_cursor
    }

    // int32 offset = 10;

    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }

    pub fn get_offset(&self) -> i32 {
        self.offset
    }

    fn get_offset_for_reflect(&self) -> &i32 {
        &self.offset
    }

    fn mut_offset_for_reflect(&mut self) -> &mut i32 {
        &mut self.offset
    }

    // .google.protobuf.Int32Value limit = 12;

    pub fn clear_limit(&mut self) {
        self.limit.clear();
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: super::wrappers::Int32Value) {
        self.limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit(&mut self) -> &mut super::wrappers::Int32Value {
        if self.limit.is_none() {
            self.limit.set_default();
        };
        self.limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_limit(&mut self) -> super::wrappers::Int32Value {
        self.limit.take().unwrap_or_else(|| super::wrappers::Int32Value::new())
    }

    pub fn get_limit(&self) -> &super::wrappers::Int32Value {
        self.limit.as_ref().unwrap_or_else(|| super::wrappers::Int32Value::default_instance())
    }

    fn get_limit_for_reflect(&self) -> &::protobuf::SingularPtrField<super::wrappers::Int32Value> {
        &self.limit
    }

    fn mut_limit_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::wrappers::Int32Value> {
        &mut self.limit
    }
}

impl ::protobuf::Message for Query {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.projection)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.kind)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.order)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.distinct_on)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_cursor)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_cursor)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.limit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.projection {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.kind {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.order {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.distinct_on {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.start_cursor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.start_cursor);
        };
        if !self.end_cursor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.end_cursor);
        };
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(10, self.offset, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.projection {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.kind {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.filter.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.order {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.distinct_on {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.start_cursor.is_empty() {
            os.write_bytes(7, &self.start_cursor)?;
        };
        if !self.end_cursor.is_empty() {
            os.write_bytes(8, &self.end_cursor)?;
        };
        if self.offset != 0 {
            os.write_int32(10, self.offset)?;
        };
        if let Some(v) = self.limit.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Query {
    fn new() -> Query {
        Query::new()
    }

    fn descriptor_static(_: ::std::option::Option<Query>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Projection>>(
                    "projection",
                    Query::get_projection_for_reflect,
                    Query::mut_projection_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KindExpression>>(
                    "kind",
                    Query::get_kind_for_reflect,
                    Query::mut_kind_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                    "filter",
                    Query::get_filter_for_reflect,
                    Query::mut_filter_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyOrder>>(
                    "order",
                    Query::get_order_for_reflect,
                    Query::mut_order_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyReference>>(
                    "distinct_on",
                    Query::get_distinct_on_for_reflect,
                    Query::mut_distinct_on_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "start_cursor",
                    Query::get_start_cursor_for_reflect,
                    Query::mut_start_cursor_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "end_cursor",
                    Query::get_end_cursor_for_reflect,
                    Query::mut_end_cursor_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offset",
                    Query::get_offset_for_reflect,
                    Query::mut_offset_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrappers::Int32Value>>(
                    "limit",
                    Query::get_limit_for_reflect,
                    Query::mut_limit_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query>(
                    "Query",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Query {
    fn clear(&mut self) {
        self.clear_projection();
        self.clear_kind();
        self.clear_filter();
        self.clear_order();
        self.clear_distinct_on();
        self.clear_start_cursor();
        self.clear_end_cursor();
        self.clear_offset();
        self.clear_limit();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KindExpression {
    // message fields
    pub name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for KindExpression {}

impl KindExpression {
    pub fn new() -> KindExpression {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static KindExpression {
        static mut instance: ::protobuf::lazy::Lazy<KindExpression> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KindExpression,
        };
        unsafe {
            instance.get(KindExpression::new)
        }
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    fn get_name_for_reflect(&self) -> &::std::string::String {
        &self.name
    }

    fn mut_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }
}

impl ::protobuf::Message for KindExpression {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for KindExpression {
    fn new() -> KindExpression {
        KindExpression::new()
    }

    fn descriptor_static(_: ::std::option::Option<KindExpression>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    KindExpression::get_name_for_reflect,
                    KindExpression::mut_name_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KindExpression>(
                    "KindExpression",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for KindExpression {
    fn clear(&mut self) {
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KindExpression {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KindExpression {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyReference {
    // message fields
    pub name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PropertyReference {}

impl PropertyReference {
    pub fn new() -> PropertyReference {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PropertyReference {
        static mut instance: ::protobuf::lazy::Lazy<PropertyReference> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyReference,
        };
        unsafe {
            instance.get(PropertyReference::new)
        }
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    fn get_name_for_reflect(&self) -> &::std::string::String {
        &self.name
    }

    fn mut_name_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }
}

impl ::protobuf::Message for PropertyReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PropertyReference {
    fn new() -> PropertyReference {
        PropertyReference::new()
    }

    fn descriptor_static(_: ::std::option::Option<PropertyReference>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    PropertyReference::get_name_for_reflect,
                    PropertyReference::mut_name_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyReference>(
                    "PropertyReference",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PropertyReference {
    fn clear(&mut self) {
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyReference {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Projection {
    // message fields
    property: ::protobuf::SingularPtrField<PropertyReference>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Projection {}

impl Projection {
    pub fn new() -> Projection {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Projection {
        static mut instance: ::protobuf::lazy::Lazy<Projection> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Projection,
        };
        unsafe {
            instance.get(Projection::new)
        }
    }

    // .google.datastore.v1beta3.PropertyReference property = 1;

    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: PropertyReference) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut PropertyReference {
        if self.property.is_none() {
            self.property.set_default();
        };
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> PropertyReference {
        self.property.take().unwrap_or_else(|| PropertyReference::new())
    }

    pub fn get_property(&self) -> &PropertyReference {
        self.property.as_ref().unwrap_or_else(|| PropertyReference::default_instance())
    }

    fn get_property_for_reflect(&self) -> &::protobuf::SingularPtrField<PropertyReference> {
        &self.property
    }

    fn mut_property_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<PropertyReference> {
        &mut self.property
    }
}

impl ::protobuf::Message for Projection {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Projection {
    fn new() -> Projection {
        Projection::new()
    }

    fn descriptor_static(_: ::std::option::Option<Projection>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyReference>>(
                    "property",
                    Projection::get_property_for_reflect,
                    Projection::mut_property_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Projection>(
                    "Projection",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Projection {
    fn clear(&mut self) {
        self.clear_property();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Projection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Projection {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyOrder {
    // message fields
    property: ::protobuf::SingularPtrField<PropertyReference>,
    pub direction: PropertyOrder_Direction,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PropertyOrder {}

impl PropertyOrder {
    pub fn new() -> PropertyOrder {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PropertyOrder {
        static mut instance: ::protobuf::lazy::Lazy<PropertyOrder> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyOrder,
        };
        unsafe {
            instance.get(PropertyOrder::new)
        }
    }

    // .google.datastore.v1beta3.PropertyReference property = 1;

    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: PropertyReference) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut PropertyReference {
        if self.property.is_none() {
            self.property.set_default();
        };
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> PropertyReference {
        self.property.take().unwrap_or_else(|| PropertyReference::new())
    }

    pub fn get_property(&self) -> &PropertyReference {
        self.property.as_ref().unwrap_or_else(|| PropertyReference::default_instance())
    }

    fn get_property_for_reflect(&self) -> &::protobuf::SingularPtrField<PropertyReference> {
        &self.property
    }

    fn mut_property_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<PropertyReference> {
        &mut self.property
    }

    // .google.datastore.v1beta3.PropertyOrder.Direction direction = 2;

    pub fn clear_direction(&mut self) {
        self.direction = PropertyOrder_Direction::DIRECTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: PropertyOrder_Direction) {
        self.direction = v;
    }

    pub fn get_direction(&self) -> PropertyOrder_Direction {
        self.direction
    }

    fn get_direction_for_reflect(&self) -> &PropertyOrder_Direction {
        &self.direction
    }

    fn mut_direction_for_reflect(&mut self) -> &mut PropertyOrder_Direction {
        &mut self.direction
    }
}

impl ::protobuf::Message for PropertyOrder {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.direction = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.direction != PropertyOrder_Direction::DIRECTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.direction);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.direction != PropertyOrder_Direction::DIRECTION_UNSPECIFIED {
            os.write_enum(2, self.direction.value())?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PropertyOrder {
    fn new() -> PropertyOrder {
        PropertyOrder::new()
    }

    fn descriptor_static(_: ::std::option::Option<PropertyOrder>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyReference>>(
                    "property",
                    PropertyOrder::get_property_for_reflect,
                    PropertyOrder::mut_property_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PropertyOrder_Direction>>(
                    "direction",
                    PropertyOrder::get_direction_for_reflect,
                    PropertyOrder::mut_direction_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyOrder>(
                    "PropertyOrder",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PropertyOrder {
    fn clear(&mut self) {
        self.clear_property();
        self.clear_direction();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyOrder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyOrder {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PropertyOrder_Direction {
    DIRECTION_UNSPECIFIED = 0,
    ASCENDING = 1,
    DESCENDING = 2,
}

impl ::protobuf::ProtobufEnum for PropertyOrder_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PropertyOrder_Direction> {
        match value {
            0 => ::std::option::Option::Some(PropertyOrder_Direction::DIRECTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(PropertyOrder_Direction::ASCENDING),
            2 => ::std::option::Option::Some(PropertyOrder_Direction::DESCENDING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PropertyOrder_Direction] = &[
            PropertyOrder_Direction::DIRECTION_UNSPECIFIED,
            PropertyOrder_Direction::ASCENDING,
            PropertyOrder_Direction::DESCENDING,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<PropertyOrder_Direction>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PropertyOrder_Direction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PropertyOrder_Direction {
}

impl ::std::default::Default for PropertyOrder_Direction {
    fn default() -> Self {
        PropertyOrder_Direction::DIRECTION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyOrder_Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Filter {
    // message oneof groups
    filter_type: ::std::option::Option<Filter_oneof_filter_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Filter {}

#[derive(Clone,PartialEq)]
pub enum Filter_oneof_filter_type {
    composite_filter(CompositeFilter),
    property_filter(PropertyFilter),
}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Filter {
        static mut instance: ::protobuf::lazy::Lazy<Filter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Filter,
        };
        unsafe {
            instance.get(Filter::new)
        }
    }

    // .google.datastore.v1beta3.CompositeFilter composite_filter = 1;

    pub fn clear_composite_filter(&mut self) {
        self.filter_type = ::std::option::Option::None;
    }

    pub fn has_composite_filter(&self) -> bool {
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_composite_filter(&mut self, v: CompositeFilter) {
        self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_composite_filter(&mut self) -> &mut CompositeFilter {
        if let ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(_)) = self.filter_type {
        } else {
            self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(CompositeFilter::new()));
        }
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_composite_filter(&mut self) -> CompositeFilter {
        if self.has_composite_filter() {
            match self.filter_type.take() {
                ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            CompositeFilter::new()
        }
    }

    pub fn get_composite_filter(&self) -> &CompositeFilter {
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(ref v)) => v,
            _ => CompositeFilter::default_instance(),
        }
    }

    // .google.datastore.v1beta3.PropertyFilter property_filter = 2;

    pub fn clear_property_filter(&mut self) {
        self.filter_type = ::std::option::Option::None;
    }

    pub fn has_property_filter(&self) -> bool {
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_property_filter(&mut self, v: PropertyFilter) {
        self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_property_filter(&mut self) -> &mut PropertyFilter {
        if let ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(_)) = self.filter_type {
        } else {
            self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(PropertyFilter::new()));
        }
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_property_filter(&mut self) -> PropertyFilter {
        if self.has_property_filter() {
            match self.filter_type.take() {
                ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            PropertyFilter::new()
        }
    }

    pub fn get_property_filter(&self) -> &PropertyFilter {
        match self.filter_type {
            ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(ref v)) => v,
            _ => PropertyFilter::default_instance(),
        }
    }
}

impl ::protobuf::Message for Filter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::composite_filter(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.filter_type = ::std::option::Option::Some(Filter_oneof_filter_type::property_filter(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.filter_type {
            match v {
                &Filter_oneof_filter_type::composite_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Filter_oneof_filter_type::property_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.filter_type {
            match v {
                &Filter_oneof_filter_type::composite_filter(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Filter_oneof_filter_type::property_filter(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Filter {
    fn new() -> Filter {
        Filter::new()
    }

    fn descriptor_static(_: ::std::option::Option<Filter>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CompositeFilter>(
                    "composite_filter",
                    Filter::has_composite_filter,
                    Filter::get_composite_filter,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PropertyFilter>(
                    "property_filter",
                    Filter::has_property_filter,
                    Filter::get_property_filter,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Filter>(
                    "Filter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Filter {
    fn clear(&mut self) {
        self.clear_composite_filter();
        self.clear_property_filter();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompositeFilter {
    // message fields
    pub op: CompositeFilter_Operator,
    filters: ::protobuf::RepeatedField<Filter>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for CompositeFilter {}

impl CompositeFilter {
    pub fn new() -> CompositeFilter {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static CompositeFilter {
        static mut instance: ::protobuf::lazy::Lazy<CompositeFilter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompositeFilter,
        };
        unsafe {
            instance.get(CompositeFilter::new)
        }
    }

    // .google.datastore.v1beta3.CompositeFilter.Operator op = 1;

    pub fn clear_op(&mut self) {
        self.op = CompositeFilter_Operator::OPERATOR_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: CompositeFilter_Operator) {
        self.op = v;
    }

    pub fn get_op(&self) -> CompositeFilter_Operator {
        self.op
    }

    fn get_op_for_reflect(&self) -> &CompositeFilter_Operator {
        &self.op
    }

    fn mut_op_for_reflect(&mut self) -> &mut CompositeFilter_Operator {
        &mut self.op
    }

    // repeated .google.datastore.v1beta3.Filter filters = 2;

    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<Filter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<Filter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }

    pub fn get_filters(&self) -> &[Filter] {
        &self.filters
    }

    fn get_filters_for_reflect(&self) -> &::protobuf::RepeatedField<Filter> {
        &self.filters
    }

    fn mut_filters_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filters
    }
}

impl ::protobuf::Message for CompositeFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.op = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.op != CompositeFilter_Operator::OPERATOR_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.op);
        };
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.op != CompositeFilter_Operator::OPERATOR_UNSPECIFIED {
            os.write_enum(1, self.op.value())?;
        };
        for v in &self.filters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for CompositeFilter {
    fn new() -> CompositeFilter {
        CompositeFilter::new()
    }

    fn descriptor_static(_: ::std::option::Option<CompositeFilter>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CompositeFilter_Operator>>(
                    "op",
                    CompositeFilter::get_op_for_reflect,
                    CompositeFilter::mut_op_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                    "filters",
                    CompositeFilter::get_filters_for_reflect,
                    CompositeFilter::mut_filters_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompositeFilter>(
                    "CompositeFilter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for CompositeFilter {
    fn clear(&mut self) {
        self.clear_op();
        self.clear_filters();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompositeFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CompositeFilter_Operator {
    OPERATOR_UNSPECIFIED = 0,
    AND = 1,
}

impl ::protobuf::ProtobufEnum for CompositeFilter_Operator {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CompositeFilter_Operator> {
        match value {
            0 => ::std::option::Option::Some(CompositeFilter_Operator::OPERATOR_UNSPECIFIED),
            1 => ::std::option::Option::Some(CompositeFilter_Operator::AND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CompositeFilter_Operator] = &[
            CompositeFilter_Operator::OPERATOR_UNSPECIFIED,
            CompositeFilter_Operator::AND,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<CompositeFilter_Operator>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CompositeFilter_Operator", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CompositeFilter_Operator {
}

impl ::std::default::Default for CompositeFilter_Operator {
    fn default() -> Self {
        CompositeFilter_Operator::OPERATOR_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeFilter_Operator {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyFilter {
    // message fields
    property: ::protobuf::SingularPtrField<PropertyReference>,
    pub op: PropertyFilter_Operator,
    value: ::protobuf::SingularPtrField<super::entity::Value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PropertyFilter {}

impl PropertyFilter {
    pub fn new() -> PropertyFilter {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PropertyFilter {
        static mut instance: ::protobuf::lazy::Lazy<PropertyFilter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyFilter,
        };
        unsafe {
            instance.get(PropertyFilter::new)
        }
    }

    // .google.datastore.v1beta3.PropertyReference property = 1;

    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    pub fn has_property(&self) -> bool {
        self.property.is_some()
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: PropertyReference) {
        self.property = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_property(&mut self) -> &mut PropertyReference {
        if self.property.is_none() {
            self.property.set_default();
        };
        self.property.as_mut().unwrap()
    }

    // Take field
    pub fn take_property(&mut self) -> PropertyReference {
        self.property.take().unwrap_or_else(|| PropertyReference::new())
    }

    pub fn get_property(&self) -> &PropertyReference {
        self.property.as_ref().unwrap_or_else(|| PropertyReference::default_instance())
    }

    fn get_property_for_reflect(&self) -> &::protobuf::SingularPtrField<PropertyReference> {
        &self.property
    }

    fn mut_property_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<PropertyReference> {
        &mut self.property
    }

    // .google.datastore.v1beta3.PropertyFilter.Operator op = 2;

    pub fn clear_op(&mut self) {
        self.op = PropertyFilter_Operator::OPERATOR_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: PropertyFilter_Operator) {
        self.op = v;
    }

    pub fn get_op(&self) -> PropertyFilter_Operator {
        self.op
    }

    fn get_op_for_reflect(&self) -> &PropertyFilter_Operator {
        &self.op
    }

    fn mut_op_for_reflect(&mut self) -> &mut PropertyFilter_Operator {
        &mut self.op
    }

    // .google.datastore.v1beta3.Value value = 3;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::entity::Value) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::entity::Value {
        if self.value.is_none() {
            self.value.set_default();
        };
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::entity::Value {
        self.value.take().unwrap_or_else(|| super::entity::Value::new())
    }

    pub fn get_value(&self) -> &super::entity::Value {
        self.value.as_ref().unwrap_or_else(|| super::entity::Value::default_instance())
    }

    fn get_value_for_reflect(&self) -> &::protobuf::SingularPtrField<super::entity::Value> {
        &self.value
    }

    fn mut_value_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::entity::Value> {
        &mut self.value
    }
}

impl ::protobuf::Message for PropertyFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.property)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.op = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.property.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.op != PropertyFilter_Operator::OPERATOR_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.op);
        };
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.property.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.op != PropertyFilter_Operator::OPERATOR_UNSPECIFIED {
            os.write_enum(2, self.op.value())?;
        };
        if let Some(v) = self.value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PropertyFilter {
    fn new() -> PropertyFilter {
        PropertyFilter::new()
    }

    fn descriptor_static(_: ::std::option::Option<PropertyFilter>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyReference>>(
                    "property",
                    PropertyFilter::get_property_for_reflect,
                    PropertyFilter::mut_property_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PropertyFilter_Operator>>(
                    "op",
                    PropertyFilter::get_op_for_reflect,
                    PropertyFilter::mut_op_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Value>>(
                    "value",
                    PropertyFilter::get_value_for_reflect,
                    PropertyFilter::mut_value_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyFilter>(
                    "PropertyFilter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PropertyFilter {
    fn clear(&mut self) {
        self.clear_property();
        self.clear_op();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PropertyFilter_Operator {
    OPERATOR_UNSPECIFIED = 0,
    LESS_THAN = 1,
    LESS_THAN_OR_EQUAL = 2,
    GREATER_THAN = 3,
    GREATER_THAN_OR_EQUAL = 4,
    EQUAL = 5,
    HAS_ANCESTOR = 11,
}

impl ::protobuf::ProtobufEnum for PropertyFilter_Operator {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PropertyFilter_Operator> {
        match value {
            0 => ::std::option::Option::Some(PropertyFilter_Operator::OPERATOR_UNSPECIFIED),
            1 => ::std::option::Option::Some(PropertyFilter_Operator::LESS_THAN),
            2 => ::std::option::Option::Some(PropertyFilter_Operator::LESS_THAN_OR_EQUAL),
            3 => ::std::option::Option::Some(PropertyFilter_Operator::GREATER_THAN),
            4 => ::std::option::Option::Some(PropertyFilter_Operator::GREATER_THAN_OR_EQUAL),
            5 => ::std::option::Option::Some(PropertyFilter_Operator::EQUAL),
            11 => ::std::option::Option::Some(PropertyFilter_Operator::HAS_ANCESTOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PropertyFilter_Operator] = &[
            PropertyFilter_Operator::OPERATOR_UNSPECIFIED,
            PropertyFilter_Operator::LESS_THAN,
            PropertyFilter_Operator::LESS_THAN_OR_EQUAL,
            PropertyFilter_Operator::GREATER_THAN,
            PropertyFilter_Operator::GREATER_THAN_OR_EQUAL,
            PropertyFilter_Operator::EQUAL,
            PropertyFilter_Operator::HAS_ANCESTOR,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<PropertyFilter_Operator>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PropertyFilter_Operator", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PropertyFilter_Operator {
}

impl ::std::default::Default for PropertyFilter_Operator {
    fn default() -> Self {
        PropertyFilter_Operator::OPERATOR_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyFilter_Operator {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GqlQuery {
    // message fields
    pub query_string: ::std::string::String,
    pub allow_literals: bool,
    named_bindings: ::std::collections::HashMap<::std::string::String, GqlQueryParameter>,
    positional_bindings: ::protobuf::RepeatedField<GqlQueryParameter>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for GqlQuery {}

impl GqlQuery {
    pub fn new() -> GqlQuery {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static GqlQuery {
        static mut instance: ::protobuf::lazy::Lazy<GqlQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GqlQuery,
        };
        unsafe {
            instance.get(GqlQuery::new)
        }
    }

    // string query_string = 1;

    pub fn clear_query_string(&mut self) {
        self.query_string.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_string(&mut self, v: ::std::string::String) {
        self.query_string = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_string(&mut self) -> &mut ::std::string::String {
        &mut self.query_string
    }

    // Take field
    pub fn take_query_string(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_string, ::std::string::String::new())
    }

    pub fn get_query_string(&self) -> &str {
        &self.query_string
    }

    fn get_query_string_for_reflect(&self) -> &::std::string::String {
        &self.query_string
    }

    fn mut_query_string_for_reflect(&mut self) -> &mut ::std::string::String {
        &mut self.query_string
    }

    // bool allow_literals = 2;

    pub fn clear_allow_literals(&mut self) {
        self.allow_literals = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_literals(&mut self, v: bool) {
        self.allow_literals = v;
    }

    pub fn get_allow_literals(&self) -> bool {
        self.allow_literals
    }

    fn get_allow_literals_for_reflect(&self) -> &bool {
        &self.allow_literals
    }

    fn mut_allow_literals_for_reflect(&mut self) -> &mut bool {
        &mut self.allow_literals
    }

    // repeated .google.datastore.v1beta3.GqlQuery.NamedBindingsEntry named_bindings = 5;

    pub fn clear_named_bindings(&mut self) {
        self.named_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_named_bindings(&mut self, v: ::std::collections::HashMap<::std::string::String, GqlQueryParameter>) {
        self.named_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_named_bindings(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, GqlQueryParameter> {
        &mut self.named_bindings
    }

    // Take field
    pub fn take_named_bindings(&mut self) -> ::std::collections::HashMap<::std::string::String, GqlQueryParameter> {
        ::std::mem::replace(&mut self.named_bindings, ::std::collections::HashMap::new())
    }

    pub fn get_named_bindings(&self) -> &::std::collections::HashMap<::std::string::String, GqlQueryParameter> {
        &self.named_bindings
    }

    fn get_named_bindings_for_reflect(&self) -> &::std::collections::HashMap<::std::string::String, GqlQueryParameter> {
        &self.named_bindings
    }

    fn mut_named_bindings_for_reflect(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, GqlQueryParameter> {
        &mut self.named_bindings
    }

    // repeated .google.datastore.v1beta3.GqlQueryParameter positional_bindings = 4;

    pub fn clear_positional_bindings(&mut self) {
        self.positional_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_positional_bindings(&mut self, v: ::protobuf::RepeatedField<GqlQueryParameter>) {
        self.positional_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_positional_bindings(&mut self) -> &mut ::protobuf::RepeatedField<GqlQueryParameter> {
        &mut self.positional_bindings
    }

    // Take field
    pub fn take_positional_bindings(&mut self) -> ::protobuf::RepeatedField<GqlQueryParameter> {
        ::std::mem::replace(&mut self.positional_bindings, ::protobuf::RepeatedField::new())
    }

    pub fn get_positional_bindings(&self) -> &[GqlQueryParameter] {
        &self.positional_bindings
    }

    fn get_positional_bindings_for_reflect(&self) -> &::protobuf::RepeatedField<GqlQueryParameter> {
        &self.positional_bindings
    }

    fn mut_positional_bindings_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<GqlQueryParameter> {
        &mut self.positional_bindings
    }
}

impl ::protobuf::Message for GqlQuery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_string)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.allow_literals = tmp;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GqlQueryParameter>>(wire_type, is, &mut self.named_bindings)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.positional_bindings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_string.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_string);
        };
        if self.allow_literals != false {
            my_size += 2;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GqlQueryParameter>>(5, &self.named_bindings);
        for value in &self.positional_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_string.is_empty() {
            os.write_string(1, &self.query_string)?;
        };
        if self.allow_literals != false {
            os.write_bool(2, self.allow_literals)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GqlQueryParameter>>(5, &self.named_bindings, os)?;
        for v in &self.positional_bindings {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for GqlQuery {
    fn new() -> GqlQuery {
        GqlQuery::new()
    }

    fn descriptor_static(_: ::std::option::Option<GqlQuery>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_string",
                    GqlQuery::get_query_string_for_reflect,
                    GqlQuery::mut_query_string_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "allow_literals",
                    GqlQuery::get_allow_literals_for_reflect,
                    GqlQuery::mut_allow_literals_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GqlQueryParameter>>(
                    "named_bindings",
                    GqlQuery::get_named_bindings_for_reflect,
                    GqlQuery::mut_named_bindings_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GqlQueryParameter>>(
                    "positional_bindings",
                    GqlQuery::get_positional_bindings_for_reflect,
                    GqlQuery::mut_positional_bindings_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GqlQuery>(
                    "GqlQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for GqlQuery {
    fn clear(&mut self) {
        self.clear_query_string();
        self.clear_allow_literals();
        self.clear_named_bindings();
        self.clear_positional_bindings();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GqlQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GqlQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GqlQueryParameter {
    // message oneof groups
    parameter_type: ::std::option::Option<GqlQueryParameter_oneof_parameter_type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for GqlQueryParameter {}

#[derive(Clone,PartialEq)]
pub enum GqlQueryParameter_oneof_parameter_type {
    value(super::entity::Value),
    cursor(::std::vec::Vec<u8>),
}

impl GqlQueryParameter {
    pub fn new() -> GqlQueryParameter {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static GqlQueryParameter {
        static mut instance: ::protobuf::lazy::Lazy<GqlQueryParameter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GqlQueryParameter,
        };
        unsafe {
            instance.get(GqlQueryParameter::new)
        }
    }

    // .google.datastore.v1beta3.Value value = 2;

    pub fn clear_value(&mut self) {
        self.parameter_type = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::entity::Value) {
        self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut super::entity::Value {
        if let ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(_)) = self.parameter_type {
        } else {
            self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(super::entity::Value::new()));
        }
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> super::entity::Value {
        if self.has_value() {
            match self.parameter_type.take() {
                ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(v)) => v,
                _ => panic!(),
            }
        } else {
            super::entity::Value::new()
        }
    }

    pub fn get_value(&self) -> &super::entity::Value {
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(ref v)) => v,
            _ => super::entity::Value::default_instance(),
        }
    }

    // bytes cursor = 3;

    pub fn clear_cursor(&mut self) {
        self.parameter_type = ::std::option::Option::None;
    }

    pub fn has_cursor(&self) -> bool {
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(_)) = self.parameter_type {
        } else {
            self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(::std::vec::Vec::new()));
        }
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cursor(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_cursor() {
            match self.parameter_type.take() {
                ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_cursor(&self) -> &[u8] {
        match self.parameter_type {
            ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for GqlQueryParameter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::value(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.parameter_type = ::std::option::Option::Some(GqlQueryParameter_oneof_parameter_type::cursor(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.parameter_type {
            match v {
                &GqlQueryParameter_oneof_parameter_type::value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GqlQueryParameter_oneof_parameter_type::cursor(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.parameter_type {
            match v {
                &GqlQueryParameter_oneof_parameter_type::value(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GqlQueryParameter_oneof_parameter_type::cursor(ref v) => {
                    os.write_bytes(3, v)?;
                },
            };
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for GqlQueryParameter {
    fn new() -> GqlQueryParameter {
        GqlQueryParameter::new()
    }

    fn descriptor_static(_: ::std::option::Option<GqlQueryParameter>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::entity::Value>(
                    "value",
                    GqlQueryParameter::has_value,
                    GqlQueryParameter::get_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "cursor",
                    GqlQueryParameter::has_cursor,
                    GqlQueryParameter::get_cursor,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GqlQueryParameter>(
                    "GqlQueryParameter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for GqlQueryParameter {
    fn clear(&mut self) {
        self.clear_value();
        self.clear_cursor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GqlQueryParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GqlQueryParameter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryResultBatch {
    // message fields
    pub skipped_results: i32,
    pub skipped_cursor: ::std::vec::Vec<u8>,
    pub entity_result_type: EntityResult_ResultType,
    entity_results: ::protobuf::RepeatedField<EntityResult>,
    pub end_cursor: ::std::vec::Vec<u8>,
    pub more_results: QueryResultBatch_MoreResultsType,
    pub snapshot_version: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for QueryResultBatch {}

impl QueryResultBatch {
    pub fn new() -> QueryResultBatch {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static QueryResultBatch {
        static mut instance: ::protobuf::lazy::Lazy<QueryResultBatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const QueryResultBatch,
        };
        unsafe {
            instance.get(QueryResultBatch::new)
        }
    }

    // int32 skipped_results = 6;

    pub fn clear_skipped_results(&mut self) {
        self.skipped_results = 0;
    }

    // Param is passed by value, moved
    pub fn set_skipped_results(&mut self, v: i32) {
        self.skipped_results = v;
    }

    pub fn get_skipped_results(&self) -> i32 {
        self.skipped_results
    }

    fn get_skipped_results_for_reflect(&self) -> &i32 {
        &self.skipped_results
    }

    fn mut_skipped_results_for_reflect(&mut self) -> &mut i32 {
        &mut self.skipped_results
    }

    // bytes skipped_cursor = 3;

    pub fn clear_skipped_cursor(&mut self) {
        self.skipped_cursor.clear();
    }

    // Param is passed by value, moved
    pub fn set_skipped_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.skipped_cursor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_skipped_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.skipped_cursor
    }

    // Take field
    pub fn take_skipped_cursor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.skipped_cursor, ::std::vec::Vec::new())
    }

    pub fn get_skipped_cursor(&self) -> &[u8] {
        &self.skipped_cursor
    }

    fn get_skipped_cursor_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.skipped_cursor
    }

    fn mut_skipped_cursor_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.skipped_cursor
    }

    // .google.datastore.v1beta3.EntityResult.ResultType entity_result_type = 1;

    pub fn clear_entity_result_type(&mut self) {
        self.entity_result_type = EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_entity_result_type(&mut self, v: EntityResult_ResultType) {
        self.entity_result_type = v;
    }

    pub fn get_entity_result_type(&self) -> EntityResult_ResultType {
        self.entity_result_type
    }

    fn get_entity_result_type_for_reflect(&self) -> &EntityResult_ResultType {
        &self.entity_result_type
    }

    fn mut_entity_result_type_for_reflect(&mut self) -> &mut EntityResult_ResultType {
        &mut self.entity_result_type
    }

    // repeated .google.datastore.v1beta3.EntityResult entity_results = 2;

    pub fn clear_entity_results(&mut self) {
        self.entity_results.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_results(&mut self, v: ::protobuf::RepeatedField<EntityResult>) {
        self.entity_results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity_results(&mut self) -> &mut ::protobuf::RepeatedField<EntityResult> {
        &mut self.entity_results
    }

    // Take field
    pub fn take_entity_results(&mut self) -> ::protobuf::RepeatedField<EntityResult> {
        ::std::mem::replace(&mut self.entity_results, ::protobuf::RepeatedField::new())
    }

    pub fn get_entity_results(&self) -> &[EntityResult] {
        &self.entity_results
    }

    fn get_entity_results_for_reflect(&self) -> &::protobuf::RepeatedField<EntityResult> {
        &self.entity_results
    }

    fn mut_entity_results_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<EntityResult> {
        &mut self.entity_results
    }

    // bytes end_cursor = 4;

    pub fn clear_end_cursor(&mut self) {
        self.end_cursor.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_cursor(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_cursor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_cursor(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_cursor
    }

    // Take field
    pub fn take_end_cursor(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_cursor, ::std::vec::Vec::new())
    }

    pub fn get_end_cursor(&self) -> &[u8] {
        &self.end_cursor
    }

    fn get_end_cursor_for_reflect(&self) -> &::std::vec::Vec<u8> {
        &self.end_cursor
    }

    fn mut_end_cursor_for_reflect(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_cursor
    }

    // .google.datastore.v1beta3.QueryResultBatch.MoreResultsType more_results = 5;

    pub fn clear_more_results(&mut self) {
        self.more_results = QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_more_results(&mut self, v: QueryResultBatch_MoreResultsType) {
        self.more_results = v;
    }

    pub fn get_more_results(&self) -> QueryResultBatch_MoreResultsType {
        self.more_results
    }

    fn get_more_results_for_reflect(&self) -> &QueryResultBatch_MoreResultsType {
        &self.more_results
    }

    fn mut_more_results_for_reflect(&mut self) -> &mut QueryResultBatch_MoreResultsType {
        &mut self.more_results
    }

    // int64 snapshot_version = 7;

    pub fn clear_snapshot_version(&mut self) {
        self.snapshot_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_snapshot_version(&mut self, v: i64) {
        self.snapshot_version = v;
    }

    pub fn get_snapshot_version(&self) -> i64 {
        self.snapshot_version
    }

    fn get_snapshot_version_for_reflect(&self) -> &i64 {
        &self.snapshot_version
    }

    fn mut_snapshot_version_for_reflect(&mut self) -> &mut i64 {
        &mut self.snapshot_version
    }
}

impl ::protobuf::Message for QueryResultBatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.skipped_results = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.skipped_cursor)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.entity_result_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity_results)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_cursor)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.more_results = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.snapshot_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.skipped_results != 0 {
            my_size += ::protobuf::rt::value_size(6, self.skipped_results, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.skipped_cursor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.skipped_cursor);
        };
        if self.entity_result_type != EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.entity_result_type);
        };
        for value in &self.entity_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.end_cursor.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.end_cursor);
        };
        if self.more_results != QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.more_results);
        };
        if self.snapshot_version != 0 {
            my_size += ::protobuf::rt::value_size(7, self.snapshot_version, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.skipped_results != 0 {
            os.write_int32(6, self.skipped_results)?;
        };
        if !self.skipped_cursor.is_empty() {
            os.write_bytes(3, &self.skipped_cursor)?;
        };
        if self.entity_result_type != EntityResult_ResultType::RESULT_TYPE_UNSPECIFIED {
            os.write_enum(1, self.entity_result_type.value())?;
        };
        for v in &self.entity_results {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.end_cursor.is_empty() {
            os.write_bytes(4, &self.end_cursor)?;
        };
        if self.more_results != QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED {
            os.write_enum(5, self.more_results.value())?;
        };
        if self.snapshot_version != 0 {
            os.write_int64(7, self.snapshot_version)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for QueryResultBatch {
    fn new() -> QueryResultBatch {
        QueryResultBatch::new()
    }

    fn descriptor_static(_: ::std::option::Option<QueryResultBatch>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "skipped_results",
                    QueryResultBatch::get_skipped_results_for_reflect,
                    QueryResultBatch::mut_skipped_results_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "skipped_cursor",
                    QueryResultBatch::get_skipped_cursor_for_reflect,
                    QueryResultBatch::mut_skipped_cursor_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EntityResult_ResultType>>(
                    "entity_result_type",
                    QueryResultBatch::get_entity_result_type_for_reflect,
                    QueryResultBatch::mut_entity_result_type_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityResult>>(
                    "entity_results",
                    QueryResultBatch::get_entity_results_for_reflect,
                    QueryResultBatch::mut_entity_results_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "end_cursor",
                    QueryResultBatch::get_end_cursor_for_reflect,
                    QueryResultBatch::mut_end_cursor_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<QueryResultBatch_MoreResultsType>>(
                    "more_results",
                    QueryResultBatch::get_more_results_for_reflect,
                    QueryResultBatch::mut_more_results_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "snapshot_version",
                    QueryResultBatch::get_snapshot_version_for_reflect,
                    QueryResultBatch::mut_snapshot_version_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<QueryResultBatch>(
                    "QueryResultBatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for QueryResultBatch {
    fn clear(&mut self) {
        self.clear_skipped_results();
        self.clear_skipped_cursor();
        self.clear_entity_result_type();
        self.clear_entity_results();
        self.clear_end_cursor();
        self.clear_more_results();
        self.clear_snapshot_version();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResultBatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResultBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum QueryResultBatch_MoreResultsType {
    MORE_RESULTS_TYPE_UNSPECIFIED = 0,
    NOT_FINISHED = 1,
    MORE_RESULTS_AFTER_LIMIT = 2,
    MORE_RESULTS_AFTER_CURSOR = 4,
    NO_MORE_RESULTS = 3,
}

impl ::protobuf::ProtobufEnum for QueryResultBatch_MoreResultsType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<QueryResultBatch_MoreResultsType> {
        match value {
            0 => ::std::option::Option::Some(QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(QueryResultBatch_MoreResultsType::NOT_FINISHED),
            2 => ::std::option::Option::Some(QueryResultBatch_MoreResultsType::MORE_RESULTS_AFTER_LIMIT),
            4 => ::std::option::Option::Some(QueryResultBatch_MoreResultsType::MORE_RESULTS_AFTER_CURSOR),
            3 => ::std::option::Option::Some(QueryResultBatch_MoreResultsType::NO_MORE_RESULTS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [QueryResultBatch_MoreResultsType] = &[
            QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED,
            QueryResultBatch_MoreResultsType::NOT_FINISHED,
            QueryResultBatch_MoreResultsType::MORE_RESULTS_AFTER_LIMIT,
            QueryResultBatch_MoreResultsType::MORE_RESULTS_AFTER_CURSOR,
            QueryResultBatch_MoreResultsType::NO_MORE_RESULTS,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<QueryResultBatch_MoreResultsType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("QueryResultBatch_MoreResultsType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for QueryResultBatch_MoreResultsType {
}

impl ::std::default::Default for QueryResultBatch_MoreResultsType {
    fn default() -> Self {
        QueryResultBatch_MoreResultsType::MORE_RESULTS_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResultBatch_MoreResultsType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
    0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
    0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
    0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
    0x70, 0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
    0xcd, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x0a,
    0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
    0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
    0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
    0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
    0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x22,
    0xdf, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
    0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
    0x3c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70,
    0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a,
    0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
    0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
    0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
    0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
    0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
    0x63, 0x74, 0x4f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75,
    0x72, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
    0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63,
    0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x64,
    0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
    0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31,
    0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
    0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
    0x74, 0x22, 0x24, 0x0a, 0x0e, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
    0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65,
    0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
    0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
    0x22, 0x55, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
    0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70,
    0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70,
    0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70,
    0x65, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f,
    0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
    0x74, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
    0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44,
    0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
    0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
    0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45,
    0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x06, 0x46,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
    0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
    0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
    0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a,
    0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
    0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74,
    0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
    0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46,
    0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x43, 0x6f, 0x6d,
    0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65,
    0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x69, 0x6c,
    0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
    0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
    0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
    0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
    0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
    0x4e, 0x44, 0x10, 0x01, 0x22, 0xeb, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
    0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
    0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62,
    0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66,
    0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
    0x12, 0x41, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
    0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
    0x02, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x56, 0x61,
    0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x4f,
    0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41,
    0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
    0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01,
    0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52,
    0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41,
    0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
    0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
    0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05,
    0x12, 0x10, 0x0a, 0x0c, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x4f, 0x52,
    0x10, 0x0b, 0x22, 0xff, 0x02, 0x0a, 0x08, 0x47, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
    0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69,
    0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x74, 0x65,
    0x72, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
    0x77, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
    0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
    0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x47, 0x71, 0x6c,
    0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x69,
    0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x42,
    0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
    0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61,
    0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e,
    0x47, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
    0x72, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x6e,
    0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x6d, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x42, 0x69,
    0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
    0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a,
    0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x47, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
    0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x11, 0x47, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
    0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e,
    0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd6,
    0x04, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x61,
    0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6b,
    0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
    0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x75, 0x72,
    0x73, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
    0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
    0x70, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
    0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73,
    0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
    0x74, 0x61, 0x33, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
    0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
    0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x65,
    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6e, 0x61,
    0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a,
    0x0f, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
    0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
    0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45,
    0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
    0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55,
    0x4c, 0x54, 0x53, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52,
    0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45,
    0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x03, 0x42, 0x90, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
    0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
    0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67,
    0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
    0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x3b,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0x33, 0x4a, 0xd0, 0x58, 0x0a, 0x07, 0x12,
    0x05, 0x0e, 0x00, 0xb4, 0x02, 0x01, 0x0a, 0xbd, 0x04, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x0e, 0x00,
    0x12, 0x32, 0xb2, 0x04, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,
    0x30, 0x31, 0x36, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x0a,
    0x0a, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30,
    0x20, 0x28, 0x74, 0x68, 0x65, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29,
    0x3b, 0x0a, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75,
    0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63,
    0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
    0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x2e, 0x0a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74,
    0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70,
    0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
    0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20,
    0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61,
    0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69,
    0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77,
    0x61, 0x72, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
    0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
    0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20,
    0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x0a, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20,
    0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f,
    0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x20,
    0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70,
    0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e,
    0x0a, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65,
    0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x20,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x12, 0x07, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x13, 0x07, 0x2e, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x14, 0x07,
    0x27, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03, 0x15, 0x07, 0x21, 0x0a, 0x08, 0x0a, 0x01,
    0x08, 0x12, 0x03, 0x17, 0x00, 0x3b, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x17, 0x00, 0x3b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x17, 0x07,
    0x17, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x17, 0x07, 0x17,
    0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x17, 0x07, 0x17,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x17, 0x1a, 0x3a, 0x0a, 0x08,
    0x0a, 0x01, 0x08, 0x12, 0x03, 0x18, 0x00, 0x58, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01,
    0x12, 0x03, 0x18, 0x00, 0x58, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03,
    0x18, 0x07, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x18,
    0x07, 0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x18,
    0x07, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x18, 0x14, 0x57,
    0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x19, 0x00, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7,
    0x07, 0x02, 0x12, 0x03, 0x19, 0x00, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x02,
    0x12, 0x03, 0x19, 0x07, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x12,
    0x03, 0x19, 0x07, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x19, 0x07, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x03, 0x12, 0x03, 0x19,
    0x1d, 0x21, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1a, 0x00, 0x2b, 0x0a, 0x0b, 0x0a, 0x04,
    0x08, 0xe7, 0x07, 0x03, 0x12, 0x03, 0x1a, 0x00, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07,
    0x03, 0x02, 0x12, 0x03, 0x1a, 0x07, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x03, 0x02,
    0x00, 0x12, 0x03, 0x1a, 0x07, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x03, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x1a, 0x07, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x03, 0x07, 0x12,
    0x03, 0x1a, 0x1e, 0x2a, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1b, 0x00, 0x35, 0x0a, 0x0b,
    0x0a, 0x04, 0x08, 0xe7, 0x07, 0x04, 0x12, 0x03, 0x1b, 0x00, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x08,
    0xe7, 0x07, 0x04, 0x02, 0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07,
    0x04, 0x02, 0x00, 0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x04,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x1b, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x04,
    0x07, 0x12, 0x03, 0x1b, 0x16, 0x34, 0x0a, 0x3e, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x1f, 0x00,
    0x44, 0x01, 0x1a, 0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73,
    0x74, 0x6f, 0x72, 0x65, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1f,
    0x08, 0x14, 0x0a, 0xe9, 0x02, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x25, 0x02, 0x31,
    0x03, 0x1a, 0xda, 0x02, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x77,
    0x68, 0x61, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x65, 0x6e,
    0x74, 0x69, 0x74, 0x79, 0x27, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74,
    0x61, 0x69, 0x6e, 0x73, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x60, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x54, 0x79, 0x70, 0x65, 0x60, 0x20, 0x69, 0x73, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x60, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
    0x60, 0x0a, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x60, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x60, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x60, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x4c,
    0x59, 0x60, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x0a, 0x20, 0x28, 0x66, 0x6f,
    0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x60, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x60, 0x2c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20,
    0x60, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74,
    0x79, 0x70, 0x65, 0x60, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20,
    0x61, 0x20, 0x60, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x60, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x73, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x60, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x60, 0x29, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x25, 0x07, 0x11, 0x0a, 0x37, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x27, 0x04, 0x20, 0x1a, 0x28, 0x20, 0x55, 0x6e,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x75,
    0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x27, 0x04, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x27, 0x1e, 0x1f, 0x0a, 0x28, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x2a, 0x04, 0x0d, 0x1a, 0x19, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2a, 0x04, 0x08, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2a, 0x0b, 0x0c, 0x0a,
    0x4e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x2d, 0x04, 0x13, 0x1a, 0x3f,
    0x20, 0x41, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x62,
    0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
    0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61,
    0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2d, 0x04, 0x0e, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x2d, 0x11, 0x12, 0x0a,
    0x1e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x30, 0x04, 0x11, 0x1a, 0x0f,
    0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x30, 0x04, 0x0c, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x30, 0x0f, 0x10, 0x0a,
    0x24, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x34, 0x02, 0x14, 0x1a, 0x17, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04,
    0x34, 0x02, 0x31, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x34,
    0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x34, 0x09, 0x0f,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x34, 0x12, 0x13, 0x0a, 0xcf,
    0x03, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x3f, 0x02, 0x14, 0x1a, 0xc1, 0x03, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72,
    0x69, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x6e, 0x6f, 0x74,
    0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
    0x73, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a,
    0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20,
    0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x60, 0x46, 0x55, 0x4c, 0x4c, 0x60, 0x5d,
    0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
    0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
    0x65, 0x2e, 0x46, 0x55, 0x4c, 0x4c, 0x5d, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x0a, 0x20,
    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x5b,
    0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5d, 0x5b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
    0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
    0x33, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5d, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
    0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x60, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x60, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x69, 0x73,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f,
    0x6f, 0x6b, 0x20, 0x75, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x77,
    0x61, 0x79, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f,
    0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0x3f, 0x02, 0x34, 0x14, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x3f, 0x02, 0x07, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x3f, 0x08, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x3f, 0x12, 0x13, 0x0a, 0x98, 0x01, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x02, 0x12, 0x03, 0x43, 0x02, 0x13, 0x1a, 0x8a, 0x01, 0x20, 0x41, 0x20, 0x63, 0x75, 0x72,
    0x73, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x6e,
    0x6c, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x45, 0x6e, 0x74,
    0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x60, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x60, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x60, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x04, 0x43,
    0x02, 0x3f, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x43, 0x02,
    0x07, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x43, 0x08, 0x0e, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x43, 0x11, 0x12, 0x0a, 0x23, 0x0a,
    0x02, 0x04, 0x01, 0x12, 0x04, 0x47, 0x00, 0x6d, 0x01, 0x1a, 0x17, 0x20, 0x41, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
    0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x47, 0x08, 0x0d, 0x0a, 0x4e,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x49, 0x02, 0x25, 0x1a, 0x41, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
    0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c,
    0x6c, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x49, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x49, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x49, 0x16, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x49, 0x23, 0x24, 0x0a, 0x78, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03,
    0x4d, 0x02, 0x23, 0x1a, 0x6b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x28, 0x69, 0x66, 0x20, 0x65, 0x6d, 0x70,
    0x74, 0x79, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6b, 0x69, 0x6e, 0x64,
    0x73, 0x29, 0x2e, 0x0a, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61,
    0x74, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x31, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6d, 0x61,
    0x79, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x4d, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x4d, 0x0b, 0x19, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4d, 0x1a, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x4d, 0x21, 0x22, 0x0a, 0x23, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02,
    0x12, 0x03, 0x50, 0x02, 0x14, 0x1a, 0x16, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74,
    0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x04, 0x50, 0x02, 0x4d, 0x23, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x50, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x50, 0x09, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02,
    0x03, 0x12, 0x03, 0x50, 0x12, 0x13, 0x0a, 0x58, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03,
    0x53, 0x02, 0x23, 0x1a, 0x4b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20,
    0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x28, 0x69,
    0x66, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x29, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x04, 0x12, 0x03, 0x53, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x06, 0x12, 0x03, 0x53, 0x0b, 0x18, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x53, 0x19, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x03, 0x03, 0x12, 0x03, 0x53, 0x21, 0x22, 0x0a, 0xc9, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02,
    0x04, 0x12, 0x03, 0x58, 0x02, 0x2d, 0x1a, 0xbb, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65,
    0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x71,
    0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x77, 0x69, 0x6c,
    0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
    0x72, 0x73, 0x74, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x65, 0x61, 0x63, 0x68, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x20, 0x63, 0x6f,
    0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65,
    0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x0a, 0x20, 0x28, 0x69,
    0x66, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
    0x64, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x04, 0x12, 0x03, 0x58,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x06, 0x12, 0x03, 0x58, 0x0b, 0x1c,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x58, 0x1d, 0x28, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x03, 0x12, 0x03, 0x58, 0x2b, 0x2c, 0x0a, 0xf4, 0x01, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x05, 0x12, 0x03, 0x5d, 0x02, 0x19, 0x1a, 0xe6, 0x01, 0x20, 0x41, 0x20,
    0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x73, 0x2e, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x63, 0x75, 0x72, 0x73,
    0x6f, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
    0x64, 0x20, 0x69, 0x6e, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x5b,
    0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x28, 0x68, 0x74, 0x74,
    0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
    0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
    0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x71, 0x75,
    0x65, 0x72, 0x69, 0x65, 0x73, 0x23, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69,
    0x6d, 0x69, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
    0x29, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x04, 0x12, 0x04, 0x5d, 0x02,
    0x58, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x05, 0x12, 0x03, 0x5d, 0x02, 0x07,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x5d, 0x08, 0x14, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x03, 0x12, 0x03, 0x5d, 0x17, 0x18, 0x0a, 0xf0, 0x01, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x06, 0x12, 0x03, 0x62, 0x02, 0x17, 0x1a, 0xe2, 0x01, 0x20, 0x41, 0x6e,
    0x20, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x73, 0x2e, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f,
    0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
    0x20, 0x69, 0x6e, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x5b, 0x63,
    0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
    0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
    0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
    0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x73,
    0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
    0x73, 0x23, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
    0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x29, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x06, 0x04, 0x12, 0x04, 0x62, 0x02, 0x5d, 0x19, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x06, 0x05, 0x12, 0x03, 0x62, 0x02, 0x07, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x06, 0x01, 0x12, 0x03, 0x62, 0x08, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x06, 0x03, 0x12, 0x03, 0x62, 0x15, 0x16, 0x0a, 0x8a, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02,
    0x07, 0x12, 0x03, 0x66, 0x02, 0x14, 0x1a, 0x7d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
    0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x62, 0x75,
    0x74, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65,
    0x72, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x20,
    0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62,
    0x65, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x20, 0x69, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x04, 0x12, 0x04,
    0x66, 0x02, 0x62, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x05, 0x12, 0x03, 0x66,
    0x02, 0x07, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x01, 0x12, 0x03, 0x66, 0x08, 0x0e,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x03, 0x12, 0x03, 0x66, 0x11, 0x13, 0x0a, 0xad,
    0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x08, 0x12, 0x03, 0x6c, 0x02, 0x28, 0x1a, 0x9f, 0x01, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62,
    0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
    0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
    0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x4f,
    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x0a, 0x20, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
    0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74,
    0x2e, 0x0a, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x20,
    0x69, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x08, 0x04, 0x12, 0x04, 0x6c, 0x02, 0x66, 0x14, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x08, 0x06, 0x12, 0x03, 0x6c, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x08, 0x01, 0x12, 0x03, 0x6c, 0x1d, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x08, 0x03, 0x12, 0x03, 0x6c, 0x25, 0x27, 0x0a, 0x29, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x70,
    0x00, 0x73, 0x01, 0x1a, 0x1d, 0x20, 0x41, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
    0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6b, 0x69, 0x6e, 0x64,
    0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x70, 0x08, 0x16, 0x0a, 0x24,
    0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x72, 0x02, 0x12, 0x1a, 0x17, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x69,
    0x6e, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0x72,
    0x02, 0x70, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x72, 0x02,
    0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x72, 0x09, 0x0d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x72, 0x10, 0x11, 0x0a, 0x49, 0x0a,
    0x02, 0x04, 0x03, 0x12, 0x04, 0x76, 0x00, 0x7a, 0x01, 0x1a, 0x3d, 0x20, 0x41, 0x20, 0x72, 0x65,
    0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f,
    0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74,
    0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12,
    0x03, 0x76, 0x08, 0x19, 0x0a, 0x6f, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x79, 0x02,
    0x12, 0x1a, 0x62, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x0a, 0x20, 0x49,
    0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20,
    0x22, 0x2e, 0x22, 0x73, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20,
    0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61,
    0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70,
    0x61, 0x74, 0x68, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x04,
    0x79, 0x02, 0x76, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x79,
    0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x79, 0x09, 0x0d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x79, 0x10, 0x11, 0x0a, 0x3e,
    0x0a, 0x02, 0x04, 0x04, 0x12, 0x05, 0x7d, 0x00, 0x80, 0x01, 0x01, 0x1a, 0x31, 0x20, 0x41, 0x20,
    0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x66, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20,
    0x61, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03, 0x7d, 0x08, 0x12, 0x0a, 0x27, 0x0a, 0x04, 0x04, 0x04,
    0x02, 0x00, 0x12, 0x03, 0x7f, 0x02, 0x21, 0x1a, 0x1a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
    0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x04, 0x7f, 0x02,
    0x7d, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12, 0x03, 0x7f, 0x02, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x7f, 0x14, 0x1c, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x7f, 0x1f, 0x20, 0x0a, 0x3a, 0x0a, 0x02,
    0x04, 0x05, 0x12, 0x06, 0x83, 0x01, 0x00, 0x95, 0x01, 0x01, 0x1a, 0x2c, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12,
    0x04, 0x83, 0x01, 0x08, 0x15, 0x0a, 0x25, 0x0a, 0x04, 0x04, 0x05, 0x04, 0x00, 0x12, 0x06, 0x85,
    0x01, 0x02, 0x8e, 0x01, 0x03, 0x1a, 0x15, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x72, 0x74,
    0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x04, 0x00, 0x01, 0x12, 0x04, 0x85, 0x01, 0x07, 0x10, 0x0a, 0x3b, 0x0a, 0x06, 0x04,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0x87, 0x01, 0x04, 0x1e, 0x1a, 0x2b, 0x20, 0x55, 0x6e,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
    0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x04, 0x87, 0x01, 0x04, 0x19, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0x87, 0x01, 0x1c, 0x1d, 0x0a, 0x1c, 0x0a, 0x06, 0x04, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x12, 0x04, 0x8a, 0x01, 0x04, 0x12, 0x1a, 0x0c, 0x20, 0x41, 0x73, 0x63,
    0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x01, 0x12, 0x04, 0x8a, 0x01, 0x04, 0x0d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0x8a, 0x01, 0x10, 0x11, 0x0a, 0x1d, 0x0a, 0x06, 0x04, 0x05,
    0x04, 0x00, 0x02, 0x02, 0x12, 0x04, 0x8d, 0x01, 0x04, 0x13, 0x1a, 0x0d, 0x20, 0x44, 0x65, 0x73,
    0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0x8d, 0x01, 0x04, 0x0e, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x05,
    0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0x8d, 0x01, 0x11, 0x12, 0x0a, 0x29, 0x0a, 0x04, 0x04,
    0x05, 0x02, 0x00, 0x12, 0x04, 0x91, 0x01, 0x02, 0x21, 0x1a, 0x1b, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x72, 0x64, 0x65,
    0x72, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12,
    0x06, 0x91, 0x01, 0x02, 0x8e, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x06,
    0x12, 0x04, 0x91, 0x01, 0x02, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12,
    0x04, 0x91, 0x01, 0x14, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x04,
    0x91, 0x01, 0x1f, 0x20, 0x0a, 0x43, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x01, 0x12, 0x04, 0x94, 0x01,
    0x02, 0x1a, 0x1a, 0x35, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x62, 0x79, 0x2e, 0x20,
    0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x60, 0x41, 0x53, 0x43,
    0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x01, 0x04, 0x12, 0x06, 0x94, 0x01, 0x02, 0x91, 0x01, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05,
    0x02, 0x01, 0x06, 0x12, 0x04, 0x94, 0x01, 0x02, 0x0b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02,
    0x01, 0x01, 0x12, 0x04, 0x94, 0x01, 0x0c, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01,
    0x03, 0x12, 0x04, 0x94, 0x01, 0x18, 0x19, 0x0a, 0x30, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x06, 0x98,
    0x01, 0x00, 0xa1, 0x01, 0x01, 0x1a, 0x22, 0x20, 0x41, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
    0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x06, 0x01,
    0x12, 0x04, 0x98, 0x01, 0x08, 0x0e, 0x0a, 0x25, 0x0a, 0x04, 0x04, 0x06, 0x08, 0x00, 0x12, 0x06,
    0x9a, 0x01, 0x02, 0xa0, 0x01, 0x03, 0x1a, 0x15, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
    0x65, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x06, 0x08, 0x00, 0x01, 0x12, 0x04, 0x9a, 0x01, 0x08, 0x13, 0x0a, 0x23, 0x0a, 0x04,
    0x04, 0x06, 0x02, 0x00, 0x12, 0x04, 0x9c, 0x01, 0x04, 0x29, 0x1a, 0x15, 0x20, 0x41, 0x20, 0x63,
    0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x06, 0x12, 0x04, 0x9c, 0x01, 0x04, 0x13,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x04, 0x9c, 0x01, 0x14, 0x24, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x04, 0x9c, 0x01, 0x27, 0x28, 0x0a, 0x27,
    0x0a, 0x04, 0x04, 0x06, 0x02, 0x01, 0x12, 0x04, 0x9f, 0x01, 0x04, 0x27, 0x1a, 0x19, 0x20, 0x41,
    0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f,
    0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x06,
    0x12, 0x04, 0x9f, 0x01, 0x04, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x01, 0x12,
    0x04, 0x9f, 0x01, 0x13, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12, 0x04,
    0x9f, 0x01, 0x25, 0x26, 0x0a, 0x55, 0x0a, 0x02, 0x04, 0x07, 0x12, 0x06, 0xa4, 0x01, 0x00, 0xb4,
    0x01, 0x01, 0x1a, 0x47, 0x20, 0x41, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
    0x6c, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
    0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
    0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x07, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x08, 0x17, 0x0a, 0x2e, 0x0a, 0x04, 0x04, 0x07, 0x04, 0x00,
    0x12, 0x06, 0xa6, 0x01, 0x02, 0xac, 0x01, 0x03, 0x1a, 0x1e, 0x20, 0x41, 0x20, 0x63, 0x6f, 0x6d,
    0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x70,
    0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x04, 0x00,
    0x01, 0x12, 0x04, 0xa6, 0x01, 0x07, 0x0f, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x04, 0xa8, 0x01, 0x04, 0x1d, 0x1a, 0x2b, 0x20, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
    0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73,
    0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x04, 0xa8, 0x01, 0x04, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x00, 0x02,
    0x12, 0x04, 0xa8, 0x01, 0x1b, 0x1c, 0x0a, 0x53, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01,
    0x12, 0x04, 0xab, 0x01, 0x04, 0x0c, 0x1a, 0x43, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20, 0x65, 0x61, 0x63,
    0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
    0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x07, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0xab, 0x01, 0x04, 0x07, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0xab, 0x01, 0x0a, 0x0b, 0x0a, 0x3c, 0x0a,
    0x04, 0x04, 0x07, 0x02, 0x00, 0x12, 0x04, 0xaf, 0x01, 0x02, 0x12, 0x1a, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63,
    0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
    0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x00, 0x04, 0x12, 0x06, 0xaf, 0x01, 0x02, 0xac, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x00, 0x06, 0x12, 0x04, 0xaf, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x00, 0x01, 0x12, 0x04, 0xaf, 0x01, 0x0b, 0x0d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x00, 0x03, 0x12, 0x04, 0xaf, 0x01, 0x10, 0x11, 0x0a, 0x52, 0x0a, 0x04, 0x04, 0x07, 0x02,
    0x01, 0x12, 0x04, 0xb3, 0x01, 0x02, 0x1e, 0x1a, 0x44, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69,
    0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2e, 0x0a, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74,
    0x20, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12, 0x04, 0xb3, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x01, 0x06, 0x12, 0x04, 0xb3, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x01, 0x01, 0x12, 0x04, 0xb3, 0x01, 0x12, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x01, 0x03, 0x12, 0x04, 0xb3, 0x01, 0x1c, 0x1d, 0x0a, 0x30, 0x0a, 0x02, 0x04, 0x08, 0x12,
    0x06, 0xb7, 0x01, 0x00, 0xd8, 0x01, 0x01, 0x1a, 0x22, 0x20, 0x41, 0x20, 0x66, 0x69, 0x6c, 0x74,
    0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
    0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x08, 0x01, 0x12, 0x04, 0xb7, 0x01, 0x08, 0x16, 0x0a, 0x2d, 0x0a, 0x04, 0x04, 0x08, 0x04, 0x00,
    0x12, 0x06, 0xb9, 0x01, 0x02, 0xce, 0x01, 0x03, 0x1a, 0x1d, 0x20, 0x41, 0x20, 0x70, 0x72, 0x6f,
    0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65,
    0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x04, 0x00, 0x01,
    0x12, 0x04, 0xb9, 0x01, 0x07, 0x0f, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x00,
    0x12, 0x04, 0xbb, 0x01, 0x04, 0x1d, 0x1a, 0x2b, 0x20, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
    0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04,
    0xbb, 0x01, 0x04, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x04, 0xbb, 0x01, 0x1b, 0x1c, 0x0a, 0x1c, 0x0a, 0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x04, 0xbe, 0x01, 0x04, 0x12, 0x1a, 0x0c, 0x20, 0x4c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61,
    0x6e, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04,
    0xbe, 0x01, 0x04, 0x0d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12,
    0x04, 0xbe, 0x01, 0x10, 0x11, 0x0a, 0x25, 0x0a, 0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x12,
    0x04, 0xc1, 0x01, 0x04, 0x1b, 0x1a, 0x15, 0x20, 0x4c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61,
    0x6e, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0xc1, 0x01, 0x04, 0x16, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0xc1, 0x01, 0x19, 0x1a, 0x0a, 0x1f,
    0x0a, 0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x03, 0x12, 0x04, 0xc4, 0x01, 0x04, 0x15, 0x1a, 0x0f,
    0x20, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x2e, 0x0a, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x04, 0xc4, 0x01, 0x04, 0x10,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x04, 0xc4, 0x01, 0x13,
    0x14, 0x0a, 0x28, 0x0a, 0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x04, 0x12, 0x04, 0xc7, 0x01, 0x04,
    0x1e, 0x1a, 0x18, 0x20, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e,
    0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x08, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x04, 0xc7, 0x01, 0x04, 0x19, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x08, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x04, 0xc7, 0x01, 0x1c, 0x1d, 0x0a, 0x18, 0x0a,
    0x06, 0x04, 0x08, 0x04, 0x00, 0x02, 0x05, 0x12, 0x04, 0xca, 0x01, 0x04, 0x0e, 0x1a, 0x08, 0x20,
    0x45, 0x71, 0x75, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00, 0x02,
    0x05, 0x01, 0x12, 0x04, 0xca, 0x01, 0x04, 0x09, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08, 0x04, 0x00,
    0x02, 0x05, 0x02, 0x12, 0x04, 0xca, 0x01, 0x0c, 0x0d, 0x0a, 0x1f, 0x0a, 0x06, 0x04, 0x08, 0x04,
    0x00, 0x02, 0x06, 0x12, 0x04, 0xcd, 0x01, 0x04, 0x16, 0x1a, 0x0f, 0x20, 0x48, 0x61, 0x73, 0x20,
    0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x08,
    0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x04, 0xcd, 0x01, 0x04, 0x10, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x08, 0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x04, 0xcd, 0x01, 0x13, 0x15, 0x0a, 0x2a, 0x0a, 0x04,
    0x04, 0x08, 0x02, 0x00, 0x12, 0x04, 0xd1, 0x01, 0x02, 0x21, 0x1a, 0x1c, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c,
    0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00,
    0x04, 0x12, 0x06, 0xd1, 0x01, 0x02, 0xce, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02,
    0x00, 0x06, 0x12, 0x04, 0xd1, 0x01, 0x02, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00,
    0x01, 0x12, 0x04, 0xd1, 0x01, 0x14, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00, 0x03,
    0x12, 0x04, 0xd1, 0x01, 0x1f, 0x20, 0x0a, 0x2a, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x01, 0x12, 0x04,
    0xd4, 0x01, 0x02, 0x12, 0x1a, 0x1c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79,
    0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x04, 0x12, 0x06, 0xd4, 0x01, 0x02,
    0xd1, 0x01, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x06, 0x12, 0x04, 0xd4, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x01, 0x12, 0x04, 0xd4, 0x01, 0x0b,
    0x0d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x01, 0x03, 0x12, 0x04, 0xd4, 0x01, 0x10, 0x11,
    0x0a, 0x35, 0x0a, 0x04, 0x04, 0x08, 0x02, 0x02, 0x12, 0x04, 0xd7, 0x01, 0x02, 0x12, 0x1a, 0x27,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,
    0x6d, 0x70, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
    0x74, 0x79, 0x20, 0x74, 0x6f, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x04,
    0x12, 0x06, 0xd7, 0x01, 0x02, 0xd4, 0x01, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02,
    0x06, 0x12, 0x04, 0xd7, 0x01, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x01,
    0x12, 0x04, 0xd7, 0x01, 0x08, 0x0d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x02, 0x03, 0x12,
    0x04, 0xd7, 0x01, 0x10, 0x11, 0x0a, 0x5e, 0x0a, 0x02, 0x04, 0x09, 0x12, 0x06, 0xdb, 0x01, 0x00,
    0xf3, 0x01, 0x01, 0x1a, 0x50, 0x20, 0x41, 0x20, 0x5b, 0x47, 0x51, 0x4c, 0x20, 0x71, 0x75, 0x65,
    0x72, 0x79, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
    0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74,
    0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73,
    0x2f, 0x67, 0x71, 0x6c, 0x2f, 0x67, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
    0x63, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x09, 0x01, 0x12, 0x04, 0xdb, 0x01,
    0x08, 0x10, 0x0a, 0x79, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x00, 0x12, 0x04, 0xde, 0x01, 0x02, 0x1a,
    0x1a, 0x6b, 0x20, 0x41, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
    0x62, 0x65, 0x64, 0x0a, 0x20, 0x5b, 0x68, 0x65, 0x72, 0x65, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70,
    0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64,
    0x6f, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x71, 0x6c, 0x2f, 0x67, 0x71, 0x6c,
    0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a,
    0x05, 0x04, 0x09, 0x02, 0x00, 0x04, 0x12, 0x06, 0xde, 0x01, 0x02, 0xdb, 0x01, 0x12, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x05, 0x12, 0x04, 0xde, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x09, 0x02, 0x00, 0x01, 0x12, 0x04, 0xde, 0x01, 0x09, 0x15, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x09, 0x02, 0x00, 0x03, 0x12, 0x04, 0xde, 0x01, 0x18, 0x19, 0x0a, 0xed, 0x01, 0x0a, 0x04,
    0x04, 0x09, 0x02, 0x01, 0x12, 0x04, 0xe4, 0x01, 0x02, 0x1a, 0x1a, 0xde, 0x01, 0x20, 0x57, 0x68,
    0x65, 0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20,
    0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x73,
    0x74, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x0a, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x20,
    0x61, 0x6c, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20,
    0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x0a, 0x20, 0x60, 0x53, 0x45, 0x4c, 0x45, 0x43,
    0x54, 0x20, 0x2a, 0x20, 0x46, 0x52, 0x4f, 0x4d, 0x20, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x57, 0x48,
    0x45, 0x52, 0x45, 0x20, 0x61, 0x20, 0x3d, 0x20, 0x27, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
    0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x27, 0x60, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x0a,
    0x20, 0x60, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x2a, 0x20, 0x46, 0x52, 0x4f, 0x4d, 0x20,
    0x4b, 0x69, 0x6e, 0x64, 0x20, 0x57, 0x48, 0x45, 0x52, 0x45, 0x20, 0x61, 0x20, 0x3d, 0x20, 0x40,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x60, 0x20, 0x69, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x01, 0x04, 0x12, 0x06, 0xe4, 0x01, 0x02, 0xde, 0x01, 0x1a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x09, 0x02, 0x01, 0x05, 0x12, 0x04, 0xe4, 0x01, 0x02, 0x06, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x01, 0x01, 0x12, 0x04, 0xe4, 0x01, 0x07, 0x15, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x01, 0x03, 0x12, 0x04, 0xe4, 0x01, 0x18, 0x19, 0x0a, 0x89, 0x02, 0x0a, 0x04, 0x04, 0x09,
    0x02, 0x02, 0x12, 0x04, 0xeb, 0x01, 0x02, 0x34, 0x1a, 0xfa, 0x01, 0x20, 0x46, 0x6f, 0x72, 0x20,
    0x65, 0x61, 0x63, 0x68, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
    0x73, 0x69, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72,
    0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20,
    0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x0a, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64,
    0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x4b, 0x65,
    0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x72, 0x65, 0x67,
    0x65, 0x78, 0x20, 0x60, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x24, 0x5d, 0x5b, 0x41,
    0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x24, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x60, 0x2c, 0x20, 0x6d,
    0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x72, 0x65,
    0x67, 0x65, 0x78, 0x0a, 0x20, 0x60, 0x5f, 0x5f, 0x2e, 0x2a, 0x5f, 0x5f, 0x60, 0x2c, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x60,
    0x22, 0x22, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02, 0x04, 0x12, 0x06,
    0xeb, 0x01, 0x02, 0xe4, 0x01, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02, 0x06, 0x12,
    0x04, 0xeb, 0x01, 0x02, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02, 0x01, 0x12, 0x04,
    0xeb, 0x01, 0x21, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02, 0x03, 0x12, 0x04, 0xeb,
    0x01, 0x32, 0x33, 0x0a, 0x90, 0x02, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x03, 0x12, 0x04, 0xf2, 0x01,
    0x02, 0x35, 0x1a, 0x81, 0x02, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62,
    0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x40, 0x31, 0x20, 0x72,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
    0x72, 0x73, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2c, 0x0a, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x31, 0x2d, 0x62, 0x61, 0x73,
    0x65, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x72, 0x61, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x75,
    0x61, 0x6c, 0x20, 0x30, 0x2e, 0x0a, 0x0a, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
    0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6e, 0x75,
    0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x60, 0x71, 0x75, 0x65,
    0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x60, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x2d, 0x74,
    0x68, 0x0a, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x61,
    0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x72,
    0x73, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20,
    0x74, 0x72, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x04, 0x12,
    0x04, 0xf2, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x06, 0x12, 0x04,
    0xf2, 0x01, 0x0b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x01, 0x12, 0x04, 0xf2,
    0x01, 0x1d, 0x30, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x03, 0x12, 0x04, 0xf2, 0x01,
    0x33, 0x34, 0x0a, 0x34, 0x0a, 0x02, 0x04, 0x0a, 0x12, 0x06, 0xf6, 0x01, 0x00, 0x80, 0x02, 0x01,
    0x1a, 0x26, 0x20, 0x41, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x47, 0x51, 0x4c,
    0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0a, 0x01, 0x12,
    0x04, 0xf6, 0x01, 0x08, 0x19, 0x0a, 0x28, 0x0a, 0x04, 0x04, 0x0a, 0x08, 0x00, 0x12, 0x06, 0xf8,
    0x01, 0x02, 0xff, 0x01, 0x03, 0x1a, 0x18, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65,
    0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x08, 0x00, 0x01, 0x12, 0x04, 0xf8, 0x01, 0x08, 0x16, 0x0a, 0x22,
    0x0a, 0x04, 0x04, 0x0a, 0x02, 0x00, 0x12, 0x04, 0xfa, 0x01, 0x04, 0x14, 0x1a, 0x14, 0x20, 0x41,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x06, 0x12, 0x04, 0xfa, 0x01, 0x04,
    0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x01, 0x12, 0x04, 0xfa, 0x01, 0x0a, 0x0f,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x00, 0x03, 0x12, 0x04, 0xfa, 0x01, 0x12, 0x13, 0x0a,
    0x54, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x01, 0x12, 0x04, 0xfe, 0x01, 0x04, 0x15, 0x1a, 0x46, 0x20,
    0x41, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x20,
    0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x72,
    0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x62, 0x61, 0x74, 0x63,
    0x68, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x05, 0x12, 0x04,
    0xfe, 0x01, 0x04, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x01, 0x12, 0x04, 0xfe,
    0x01, 0x0a, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x03, 0x12, 0x04, 0xfe, 0x01,
    0x13, 0x14, 0x0a, 0x37, 0x0a, 0x02, 0x04, 0x0b, 0x12, 0x06, 0x83, 0x02, 0x00, 0xb4, 0x02, 0x01,
    0x1a, 0x29, 0x20, 0x41, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x62,
    0x79, 0x20, 0x61, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x0b, 0x01, 0x12, 0x04, 0x83, 0x02, 0x08, 0x18, 0x0a, 0x43, 0x0a, 0x04, 0x04, 0x0b, 0x04, 0x00,
    0x12, 0x06, 0x85, 0x02, 0x02, 0x95, 0x02, 0x03, 0x1a, 0x33, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70,
    0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x73, 0x60, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x04, 0x00, 0x01, 0x12, 0x04, 0x85, 0x02, 0x07, 0x16, 0x0a, 0x38, 0x0a, 0x06,
    0x04, 0x0b, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0x87, 0x02, 0x04, 0x26, 0x1a, 0x28, 0x20, 0x55,
    0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20,
    0x75, 0x73, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x04, 0x87, 0x02, 0x04, 0x21, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02,
    0x00, 0x02, 0x12, 0x04, 0x87, 0x02, 0x24, 0x25, 0x0a, 0x4b, 0x0a, 0x06, 0x04, 0x0b, 0x04, 0x00,
    0x02, 0x01, 0x12, 0x04, 0x8a, 0x02, 0x04, 0x15, 0x1a, 0x3b, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65,
    0x74, 0x63, 0x68, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x04, 0x8a, 0x02, 0x04, 0x10, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x01,
    0x02, 0x12, 0x04, 0x8a, 0x02, 0x13, 0x14, 0x0a, 0x57, 0x0a, 0x06, 0x04, 0x0b, 0x04, 0x00, 0x02,
    0x02, 0x12, 0x04, 0x8d, 0x02, 0x04, 0x21, 0x1a, 0x47, 0x20, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x20, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2c,
    0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62,
    0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61,
    0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0x8d, 0x02, 0x04,
    0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0x8d, 0x02,
    0x1f, 0x20, 0x0a, 0x5d, 0x0a, 0x06, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x03, 0x12, 0x04, 0x91, 0x02,
    0x04, 0x22, 0x1a, 0x4d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69,
    0x73, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20,
    0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x72,
    0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e,
    0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x04, 0x91, 0x02,
    0x04, 0x1d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x04, 0x91,
    0x02, 0x20, 0x21, 0x0a, 0x2f, 0x0a, 0x06, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x04, 0x12, 0x04, 0x94,
    0x02, 0x04, 0x18, 0x1a, 0x1f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
    0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
    0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x94, 0x02, 0x04, 0x13, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x0b, 0x04, 0x00, 0x02, 0x04, 0x02,
    0x12, 0x04, 0x94, 0x02, 0x16, 0x17, 0x0a, 0x4e, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x00, 0x12, 0x04,
    0x98, 0x02, 0x02, 0x1c, 0x1a, 0x40, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x73, 0x6b, 0x69,
    0x70, 0x70, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,
    0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x66,
    0x66, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x04, 0x12,
    0x06, 0x98, 0x02, 0x02, 0x95, 0x02, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x05,
    0x12, 0x04, 0x98, 0x02, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x01, 0x12,
    0x04, 0x98, 0x02, 0x08, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x03, 0x12, 0x04,
    0x98, 0x02, 0x1a, 0x1b, 0x0a, 0x7d, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x01, 0x12, 0x04, 0x9c, 0x02,
    0x02, 0x1b, 0x1a, 0x6f, 0x20, 0x41, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
    0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x0a, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x62,
    0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x60, 0x73, 0x6b, 0x69, 0x70,
    0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x60, 0x20, 0x21, 0x3d, 0x20,
    0x30, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x04, 0x12, 0x06, 0x9c, 0x02,
    0x02, 0x98, 0x02, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x05, 0x12, 0x04, 0x9c,
    0x02, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x01, 0x12, 0x04, 0x9c, 0x02,
    0x08, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01, 0x03, 0x12, 0x04, 0x9c, 0x02, 0x19,
    0x1a, 0x0a, 0x45, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x02, 0x12, 0x04, 0x9f, 0x02, 0x02, 0x31, 0x1a,
    0x37, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x79, 0x70,
    0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x60, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x73, 0x60, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02,
    0x04, 0x12, 0x06, 0x9f, 0x02, 0x02, 0x9c, 0x02, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x02, 0x06, 0x12, 0x04, 0x9f, 0x02, 0x02, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02,
    0x01, 0x12, 0x04, 0x9f, 0x02, 0x1a, 0x2c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x03,
    0x12, 0x04, 0x9f, 0x02, 0x2f, 0x30, 0x0a, 0x2b, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x03, 0x12, 0x04,
    0xa2, 0x02, 0x02, 0x2b, 0x1a, 0x1d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x61, 0x74, 0x63,
    0x68, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x04, 0x12, 0x04, 0xa2, 0x02,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x06, 0x12, 0x04, 0xa2, 0x02, 0x0b,
    0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x01, 0x12, 0x04, 0xa2, 0x02, 0x18, 0x26,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03, 0x03, 0x12, 0x04, 0xa2, 0x02, 0x29, 0x2a, 0x0a,
    0x58, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x04, 0x12, 0x04, 0xa5, 0x02, 0x02, 0x17, 0x1a, 0x4a, 0x20,
    0x41, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
    0x61, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x04, 0x04, 0x12, 0x06, 0xa5, 0x02, 0x02, 0xa2, 0x02, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x04, 0x05, 0x12, 0x04, 0xa5, 0x02, 0x02, 0x07, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x04, 0x01, 0x12, 0x04, 0xa5, 0x02, 0x08, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x04,
    0x03, 0x12, 0x04, 0xa5, 0x02, 0x15, 0x16, 0x0a, 0x3f, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x05, 0x12,
    0x04, 0xa8, 0x02, 0x02, 0x23, 0x1a, 0x31, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x61,
    0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
    0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05,
    0x04, 0x12, 0x06, 0xa8, 0x02, 0x02, 0xa5, 0x02, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x05, 0x06, 0x12, 0x04, 0xa8, 0x02, 0x02, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05,
    0x01, 0x12, 0x04, 0xa8, 0x02, 0x12, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x03,
    0x12, 0x04, 0xa8, 0x02, 0x21, 0x22, 0x0a, 0x86, 0x04, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x06, 0x12,
    0x04, 0xb3, 0x02, 0x02, 0x1d, 0x1a, 0xf7, 0x03, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
    0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
    0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20,
    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x27, 0x73,
    0x20, 0x60, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x60, 0x20,
    0x28, 0x6f, 0x72, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
    0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
    0x69, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x73,
    0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x62, 0x61, 0x74, 0x63, 0x68, 0x27, 0x73, 0x0a, 0x20, 0x60, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75,
    0x72, 0x73, 0x6f, 0x72, 0x60, 0x20, 0x28, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71,
    0x75, 0x65, 0x72, 0x79, 0x27, 0x73, 0x20, 0x60, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73,
    0x6f, 0x72, 0x60, 0x29, 0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
    0x67, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
    0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72,
    0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x71, 0x75,
    0x65, 0x72, 0x79, 0x0a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20,
    0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
    0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e,
    0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x27, 0x73, 0x20, 0x73, 0x6e,
    0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x0a, 0x20,
    0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c,
    0x20, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68,
    0x65, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a,
    0x0f, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x06, 0x04, 0x12, 0x06, 0xb3, 0x02, 0x02, 0xa8, 0x02, 0x23,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x06, 0x05, 0x12, 0x04, 0xb3, 0x02, 0x02, 0x07, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x06, 0x01, 0x12, 0x04, 0xb3, 0x02, 0x08, 0x18, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0b, 0x02, 0x06, 0x03, 0x12, 0x04, 0xb3, 0x02, 0x1b, 0x1c, 0x62, 0x06, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x33,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
